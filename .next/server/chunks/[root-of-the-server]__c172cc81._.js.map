{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/db.ts"],"sourcesContent":["// lib/db.ts\n// \"use server\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\nimport { PGVectorStore } from \"@langchain/community/vectorstores/pgvector\";\nimport { Pool } from \"pg\";\n\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const db = pool;\nexport async function getDbConnection() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error('Neon Database URL is not defined');\n  }\n  return neon(process.env.DATABASE_URL);\n}\n\nexport async function getVectorStore(fileUrl: string) {\n    const embeddings = new GoogleGenerativeAIEmbeddings({\n      modelName: \"embedding-001\",\n      apiKey: process.env.GEMINI_API_KEY!\n    });\n  \n    const config = {\n      postgresConnectionOptions: {\n        connectionString: process.env.DATABASE_URL!\n      },\n      tableName: \"pdf_embeddings\",\n      columns: {\n        idColumnName: \"id\",\n        vectorColumnName: \"embedding\",\n        contentColumnName: \"content\",\n        metadataColumnName: \"metadata\",\n      },\n      filter: {\n        original_file_url: fileUrl // Add filter to scope to this PDF\n      }\n    };\n  \n    return await PGVectorStore.initialize(embeddings, config);\n  }"],"names":[],"mappings":"AAAA,YAAY;AACZ,gBAAgB;;;;;;AAChB;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEO,MAAM,KAAK;AACX,eAAe;IACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;QAC7B,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AACtC;AAEO,eAAe,eAAe,OAAe;IAChD,MAAM,aAAa,IAAI,sKAAA,CAAA,+BAA4B,CAAC;QAClD,WAAW;QACX,QAAQ,QAAQ,GAAG,CAAC,cAAc;IACpC;IAEA,MAAM,SAAS;QACb,2BAA2B;YACzB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC5C;QACA,WAAW;QACX,SAAS;YACP,cAAc;YACd,kBAAkB;YAClB,mBAAmB;YACnB,oBAAoB;QACtB;QACA,QAAQ;YACN,mBAAmB,QAAQ,kCAAkC;QAC/D;IACF;IAEA,OAAO,MAAM,8KAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,YAAY;AACpD","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/utils/prompts.ts"],"sourcesContent":["\nexport const SUMMARY_SYSTEM_PROMPT = `You are an expert document analyst who creates precision summaries that transform complex documents into actionable intelligence. Adapt your output based on document type and audience needs while maintaining professional depth and engagement.\n\n# [Document Title: Specific and Descriptive]\n‚Ä¢ üéØ Core Thesis: One compelling sentence capturing the document's essence\n‚Ä¢ üìå Context: Optional secondary framing point if needed\n\n## Document Profile\n‚Ä¢ üìÑ Type: [Academic/Legal/Business/Technical] \n‚Ä¢ üë• Primary Audience: [Students/Lawyers/Executives/Technicians]\n‚Ä¢ ‚è≥ Time Relevance: [Key dates/periods/deadlines]\n‚Ä¢ üèõÔ∏è Jurisdiction/Scope: [For legal/business docs]\n\n## Decision-Making Essentials\n‚Ä¢ üîë [First evidence-based insight requiring action]\n‚Ä¢ üí° [Second significant finding with implications]\n‚Ä¢ üìä [Third data-driven conclusion with impact]\n‚Ä¢ üîÑ Time-sensitive elements: [üü¢ Low/üü° Medium/üî¥ High urgency]\n\n## \"If You Only Remember 3 Things\"\n‚Ä¢ ‚≠ê [Most critical takeaway with specific details]\n‚Ä¢ ‚≠ê [Second must-know point with practical relevance]\n‚Ä¢ ‚≠ê [Third essential insight with distinctive value]\n\n## Actionable Intelligence\n‚Ä¢ ‚úÖ [First practical application or recommendation]\n‚Ä¢ üõ†Ô∏è [Second implementation strategy]\n‚Ä¢ üìà [Third strategic consideration]\n‚Ä¢ ‚è±Ô∏è [Time-sensitive actions with deadlines]\n\n## Key Metrics & Data Points\n‚Ä¢ üìà [Primary Metric]: [Value] | [Context/Comparison] | [Significance]\n‚Ä¢ üí∞ [Financial Figure]: [Value] | [% change] | [Impact assessment]\n‚Ä¢ üìä [Statistical Finding]: [Value] | [Confidence level] | [Implications]\n‚Ä¢ ‚è±Ô∏è [Time-based Data]: [Value] | [Trend direction] | [Forecast]\n‚Ä¢ üî¢ [Other Critical Number]: [Value] | [Benchmark comparison] | [Actionability]\n\n## Stakeholder Impact Matrix\n‚Ä¢ üë• [Group 1]: [Benefit level] | [Risk exposure] | [Required action]\n‚Ä¢ üë• [Group 2]: [Benefit level] | [Risk exposure] | [Required action]\n‚Ä¢ üë• [Group 3]: [Benefit level] | [Risk exposure] | [Required action]\n\n## Terminology Decoder\n‚Ä¢ üìö [Key Term 1]: [Audience-appropriate definition]\n‚Ä¢ üîç [Key Term 2]: [Simplified explanation]\n‚Ä¢ ‚öôÔ∏è [Technical term]: [Field-specific clarification]\n\n## Professional Evaluation\n‚Ä¢ üí™ Document Strength: [Methodology/evidence/innovation]\n‚Ä¢ ‚ö†Ô∏è Caveat: [Limitation/bias/competitor concern] \n‚Ä¢ üö® Red Flags: [Unsubstantiated claims/contradictions/omissions]\n\n## Professional Lens Filters\n‚Ä¢ üéì **Academic Perspective**\n  - Theoretical Framework: [Key academic foundations]\n  - Research Methodology: [Validity assessment ‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ]\n  - Citation Highlights: [Most reference-worthy content]\n\n‚Ä¢ ‚öñÔ∏è **Legal Perspective**\n  - Precedent Value: [Case law/regulatory impact]\n  - Frequently Contested Clauses: [Key legal pressure points]\n  - Critical Deadlines: [Filing/compliance dates]\n\n‚Ä¢ üí∞ **Business Perspective**\n  - Financial Impact: [Revenue/cost implications]\n  - Market Intelligence: [Competitive positioning]\n  - Implementation Complexity: [Resources/timeline/dependencies]\n\n‚Ä¢ ‚öôÔ∏è **Technical Perspective**\n  - Specifications: [Key technical requirements]\n  - Integration Requirements: [System/compatibility notes]\n  - Implementation Roadmap: [Step-by-step guidance]\n\n## Action Pack\n‚Ä¢ üìß Communication Template: [Key points for stakeholder briefing]\n‚Ä¢ üìä Visualization-Ready Data: [Key metrics/comparisons]\n‚Ä¢ üó£Ô∏è Talking Points: [For meetings/presentations/discussions]\n\n## Final Synthesis\n‚Ä¢ üìå Ultimate Takeaway: [Single most important point]\n‚Ä¢ üîÆ Future Implications: [Emerging trends/long-term impact]\n\n---\n\n**Formatting Rules:**\n1. Emoji Usage:\n   - Choose emojis appropriate to subject matter\n   - Use consistently for section headers\n   - Keep professional (fewer emojis for formal documents)\n   - Ensure emojis add meaning rather than decoration\n\n2. Always:\n   - Begin main points with \"‚Ä¢ [emoji]\"\n   - Maintain parallel structure throughout\n   - Use Markdown headers (##, ###) for clear hierarchy\n   - Keep explanations audience-appropriate\n   - Color-code urgency where applicable (üü¢/üü°/üî¥)\n\n3. Section Selection:\n   - Include core sections for all documents\n   - Adapt Professional Lens section based on document type\n   - Emphasize sections most relevant to primary audience\n   - Omit sections that don't apply to the document\n\n4. Never:\n   - Use numbered lists\n   - Exceed 5 bullet points per section\n   - Include inappropriate perspective for document type\n\n**Quality Checks:**\n‚úì Decision-critical information prioritized\n‚úì Technical accuracy preserved\n‚úì Jargon explained for non-specialists\n‚úì Actionable insights highlighted\n‚úì Key numerical data clearly presented\n‚úì Source limitations acknowledged\n‚úì Visual elements (tables, color-coding) used purposefully\n‚úì Important metrics contextualized with benchmarks\n`\n"],"names":[],"mappings":";;;AACO,MAAM,wBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHtC,CAAC","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/geminiai.ts"],"sourcesContent":["import { SUMMARY_SYSTEM_PROMPT } from \"@/utils/prompts\";\nimport { GoogleGenAI } from \"@google/genai\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\nimport { ConversationalRetrievalQAChain } from \"langchain/chains\";\n\n// Check for API key\nif (!process.env.GEMINI_API_KEY) {\n  throw new Error(\"‚ùå Missing GEMINI_API_KEY. Please define it in .env.local\");\n}\n\n// Initialize Gemini\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n\nexport const generateSummaryFromGemini = async (pdfText: string) => {\n  try {\n    const prompt = `${SUMMARY_SYSTEM_PROMPT}\n\nTransform this document into an engaging, easy-to-read summary with contextually relevant emojis and proper markdown formatting:\n\n${pdfText}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [\n        {\n          role: \"user\",\n          parts: [{ text: prompt }],\n        },\n      ],\n    });\n\n    // Some SDKs may return .candidates[0].content.parts[0].text instead of .text\n    const summary = (response as any)?.text ||\n                    (response as any)?.candidates?.[0]?.content?.parts?.[0]?.text;\n\n    if (!summary) {\n      throw new Error(\"‚ùå Empty response from Gemini API\");\n    }\n\n    return summary;\n\n  } catch (error: any) {\n    // Handle Gemini rate limit\n    if (error?.status === 429) {\n      throw new Error(\"‚ùå RATE_LIMIT_EXCEEDED\");\n    }\n\n    // Full error trace\n    console.error(\"üö® Gemini API Error:\", {\n      message: error.message,\n      stack: error.stack,\n      cause: error.cause,\n      error,\n    });\n\n    throw error;\n  }\n};\n\nexport async function generateQuestions(summaryText: string) {\n  const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n  const prompt = `\nYou are a quiz generator. Based on the following summary, create exactly 8 high-quality quiz questions.\nMix multiple-choice questions (4 options each) with short-answer questions.\n\nIMPORTANT FORMATTING RULES:\n- Start each question with \"QUESTION:\" followed by the question text\n- For multiple-choice, list options as \"OPTION A:\", \"OPTION B:\", etc.\n- End each question with \"ANSWER:\" followed by the correct answer\n- For MCQ answers, use just the letter (A, B, C, or D)\n- For short answers, provide a concise but complete answer\n- Separate each question with \"---\"\n\nExample format:\nQUESTION: What is the capital of France?\nOPTION A: Berlin\nOPTION B: Madrid  \nOPTION C: Paris\nOPTION D: Rome\nANSWER: C\n\n---\n\nQUESTION: Explain the main benefit of renewable energy.\nANSWER: Renewable energy sources like solar and wind are sustainable and don't deplete natural resources, making them environmentally friendly alternatives to fossil fuels.\n\n---\n\nSummary to create questions from:\n${summaryText}\n\nGenerate the questions now:`;\n\n  try {\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the structured response\n    const questionBlocks = text.split('---').filter(block => block.trim());\n    \n    const parsed = questionBlocks.map((block) => {\n      const lines = block.trim().split('\\n').filter(line => line.trim());\n      \n      let question = '';\n      let options: string[] = [];\n      let answer = '';\n      \n      for (const line of lines) {\n        const trimmedLine = line.trim();\n        \n        if (trimmedLine.startsWith('QUESTION:')) {\n          question = trimmedLine.replace('QUESTION:', '').trim();\n        } else if (trimmedLine.startsWith('OPTION')) {\n          const optionText = trimmedLine.replace(/OPTION [A-D]:\\s*/, '').trim();\n          if (optionText) options.push(optionText);\n        } else if (trimmedLine.startsWith('ANSWER:')) {\n          answer = trimmedLine.replace('ANSWER:', '').trim();\n        }\n      }\n      \n      // Validate the parsed question\n      if (!question || !answer) {\n        return null;\n      }\n      \n      // For MCQ, ensure we have 4 options and the answer is a letter\n      if (options.length === 4 && ['A', 'B', 'C', 'D'].includes(answer)) {\n        return {\n          question,\n          options,\n          answer,\n          type: 'mcq'\n        };\n      }\n      \n      // For short answer, ensure no options and answer is substantial\n      if (options.length === 0 && answer.length > 10) {\n        return {\n          question,\n          options: [],\n          answer,\n          type: 'short'\n        };\n      }\n      \n      return null;\n    }).filter(Boolean);\n\n    // Ensure we have at least some valid questions\n    if (parsed.length === 0) {\n      throw new Error(\"No valid questions could be parsed from the response\");\n    }\n\n    return parsed;\n    \n  } catch (error) {\n    console.error(\"Error generating questions:\", error);\n    \n    // Fallback: generate simpler questions\n    try {\n      return await generateFallbackQuestions(summaryText);\n    } catch (fallbackError) {\n      console.error(\"Fallback question generation also failed:\", fallbackError);\n      throw new Error(\"Failed to generate quiz questions\");\n    }\n  }\n}\n\n// Fallback question generator with simpler format\nasync function generateFallbackQuestions(summaryText: string) {\n  const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n  \n  const prompt = `\nCreate 5 simple questions about this summary. Make them clear and answerable.\n\nFormat each as:\nQ1: [question]\nA1: [answer]\n\nQ2: [question] \nA2: [answer]\n\nSummary: ${summaryText}`;\n\n  const result = await model.generateContent(prompt);\n  const response = await result.response;\n  const text = response.text();\n  \n  const questions = [];\n  const lines = text.split('\\n');\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.match(/^Q\\d+:/)) {\n      const question = line.replace(/^Q\\d+:\\s*/, '').trim();\n      const nextLine = lines[i + 1]?.trim();\n      \n      if (nextLine && nextLine.match(/^A\\d+:/)) {\n        const answer = nextLine.replace(/^A\\d+:\\s*/, '').trim();\n        \n        if (question && answer) {\n          questions.push({\n            question,\n            options: [],\n            answer,\n            type: 'short'\n          });\n        }\n      }\n    }\n  }\n  \n  return questions;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 663, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/app/api/summaries/%5Bid%5D/quiz/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getDbConnection } from \"@/lib/db\";\nimport { generateQuestions } from \"@/lib/geminiai\";\n\nexport async function GET(\n  req: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const sql = await getDbConnection();\n    const [summary] = await sql`\n      SELECT title, summary_text FROM pdf_summaries WHERE id = ${params.id}\n    `;\n\n    if (!summary) {\n      return NextResponse.json({ error: \"Summary not found\" }, { status: 404 });\n    }\n\n    // Generate questions with better error handling\n    let questions;\n    try {\n      questions = await generateQuestions(summary.summary_text);\n    } catch (error) {\n      console.error(\"Error generating questions:\", error);\n      return NextResponse.json(\n        { error: \"Failed to generate quiz questions. Please try again.\" },\n        { status: 500 }\n      );\n    }\n\n    // Validate questions before returning\n    const validQuestions = questions.filter(q => \n      q.question && \n      q.question.trim() !== '' && \n      q.answer && \n      q.answer.trim() !== ''\n    );\n\n    if (validQuestions.length === 0) {\n      return NextResponse.json(\n        { error: \"No valid questions could be generated from this summary.\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({ \n      questions: validQuestions,\n      summaryTitle: summary.title || \"Untitled Summary\"\n    });\n  } catch (error) {\n    console.error(\"Error in quiz API:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;;;;;AAEO,eAAe,IACpB,GAAY,EACZ,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;QAChC,MAAM,CAAC,QAAQ,GAAG,MAAM,GAAG,CAAC;+DAC+B,EAAE,OAAO,EAAE,CAAC;IACvE,CAAC;QAED,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,gDAAgD;QAChD,IAAI;QACJ,IAAI;YACF,YAAY,MAAM,CAAA,GAAA,iHAAA,CAAA,oBAAiB,AAAD,EAAE,QAAQ,YAAY;QAC1D,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuD,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,iBAAiB,UAAU,MAAM,CAAC,CAAA,IACtC,EAAE,QAAQ,IACV,EAAE,QAAQ,CAAC,IAAI,OAAO,MACtB,EAAE,MAAM,IACR,EAAE,MAAM,CAAC,IAAI,OAAO;QAGtB,IAAI,eAAe,MAAM,KAAK,GAAG;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2D,GACpE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW;YACX,cAAc,QAAQ,KAAK,IAAI;QACjC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}