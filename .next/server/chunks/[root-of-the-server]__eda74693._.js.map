{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/app/api/save-chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { neon } from '@neondatabase/serverless';\nimport { auth, currentUser } from '@clerk/nextjs/server';\n\nconst sql = neon(process.env.DATABASE_URL!);\n\nexport async function POST(req: Request) {\n  try {\n    const user = await currentUser();\n    \n    const { fileUrl, question, answer, sources } = await req.json();\n\n    // Validate inputs\n    if (!fileUrl || !question || !answer) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    // Properly format and validate sources\n    let formattedSources = [];\n    try {\n      formattedSources = Array.isArray(sources) ? sources : [];\n      // Ensure each source has required fields\n      formattedSources = formattedSources.map(source => ({\n        page: source.page || 1,\n        content: source.content || '',\n        ...source // Include any additional fields\n      }));\n    } catch (e) {\n      console.warn('Invalid sources format, using empty array', e);\n      formattedSources = [];\n    }\n\n    // Insert with proper JSON handling\n    const result = await sql`\n      INSERT INTO chat_history (\n        file_url, \n        question, \n        answer, \n        sources,\n        user_id\n      )\n      VALUES (\n        ${fileUrl}, \n        ${question}, \n        ${answer}, \n        ${JSON.stringify(formattedSources)}::jsonb,\n        ${user?.id || null}\n      )\n      RETURNING id\n    `;\n\n    return NextResponse.json({ \n      success: true,\n      chatId: result[0]?.id \n    });\n\n  } catch (error) {\n    console.error('Database operation failed:', error);\n    return NextResponse.json(\n      { \n        error: \"Failed to save chat\",\n        details: process.env.NODE_ENV === 'development' \n          ? error instanceof Error ? error.message : String(error)\n          : undefined\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AAElC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,4LAAA,CAAA,cAAW,AAAD;QAE7B,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7D,kBAAkB;QAClB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,IAAI,mBAAmB,EAAE;QACzB,IAAI;YACF,mBAAmB,MAAM,OAAO,CAAC,WAAW,UAAU,EAAE;YACxD,yCAAyC;YACzC,mBAAmB,iBAAiB,GAAG,CAAC,CAAA,SAAU,CAAC;oBACjD,MAAM,OAAO,IAAI,IAAI;oBACrB,SAAS,OAAO,OAAO,IAAI;oBAC3B,GAAG,OAAO,gCAAgC;gBAC5C,CAAC;QACH,EAAE,OAAO,GAAG;YACV,QAAQ,IAAI,CAAC,6CAA6C;YAC1D,mBAAmB,EAAE;QACvB;QAEA,mCAAmC;QACnC,MAAM,SAAS,MAAM,GAAG,CAAC;;;;;;;;;QASrB,EAAE,QAAQ;QACV,EAAE,SAAS;QACX,EAAE,OAAO;QACT,EAAE,KAAK,SAAS,CAAC,kBAAkB;QACnC,EAAE,MAAM,MAAM,KAAK;;;IAGvB,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ,MAAM,CAAC,EAAE,EAAE;QACrB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,uCACL,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAEtD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}