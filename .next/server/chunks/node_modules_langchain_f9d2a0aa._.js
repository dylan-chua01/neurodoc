module.exports = {

"[project]/node_modules/langchain/dist/document_loaders/base.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/document_loaders/base.js [app-route] (ecmascript) <module evaluation>");
;
}}),
"[project]/node_modules/langchain/dist/document_loaders/base.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/document_loaders/base.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/document_loaders/base.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/dist/document_loaders/fs/buffer.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BufferLoader": (()=>BufferLoader)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/utils/env.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/utils/env.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/document_loaders/base.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/document_loaders/base.js [app-route] (ecmascript)");
;
;
class BufferLoader extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$document_loaders$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseDocumentLoader"] {
    constructor(filePathOrBlob){
        super();
        Object.defineProperty(this, "filePathOrBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filePathOrBlob
        });
    }
    /**
     * Method that reads the buffer contents and metadata based on the type of
     * `filePathOrBlob`, and then calls the `parse()` method to parse the
     * buffer and return the documents.
     * @returns Promise that resolves with an array of `Document` objects.
     */ async load() {
        let buffer;
        let metadata;
        if (typeof this.filePathOrBlob === "string") {
            const { readFile } = await BufferLoader.imports();
            buffer = await readFile(this.filePathOrBlob);
            metadata = {
                source: this.filePathOrBlob
            };
        } else {
            buffer = await this.filePathOrBlob.arrayBuffer().then((ab)=>Buffer.from(ab));
            metadata = {
                source: "blob",
                blobType: this.filePathOrBlob.type
            };
        }
        return this.parse(buffer, metadata);
    }
    /**
     * Static method that imports the `readFile` function from the
     * `fs/promises` module in Node.js. It is used to dynamically import the
     * function when needed. If the import fails, it throws an error
     * indicating that the `fs/promises` module is not available in the
     * current environment.
     * @returns Promise that resolves with an object containing the `readFile` function.
     */ static async imports() {
        try {
            const { readFile } = await __turbopack_context__.r("[externals]/node:fs/promises [external] (node:fs/promises, cjs, async loader)")(__turbopack_context__.i);
            return {
                readFile
            };
        } catch (e) {
            console.error(e);
            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getEnv"])()}'. See https://<link to docs> for alternatives.`);
        }
    }
}
}}),
"[project]/node_modules/langchain/document_loaders/fs/buffer.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$document_loaders$2f$fs$2f$buffer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/document_loaders/fs/buffer.js [app-route] (ecmascript)");
;
}}),
"[project]/node_modules/langchain/document_loaders/fs/buffer.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$document_loaders$2f$fs$2f$buffer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/document_loaders/fs/buffer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$document_loaders$2f$fs$2f$buffer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/document_loaders/fs/buffer.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseChain": (()=>BaseChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$outputs$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/outputs.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$outputs$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/outputs.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$callbacks$2f$manager$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/callbacks/manager.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$callbacks$2f$manager$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/callbacks/manager.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$runnables$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/runnables.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/runnables/config.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/language_models/base.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/language_models/base.js [app-route] (ecmascript)");
;
;
;
;
class BaseChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseLangChain"] {
    get lc_namespace() {
        return [
            "langchain",
            "chains",
            this._chainType()
        ];
    }
    constructor(fields, /** @deprecated */ verbose, /** @deprecated */ callbacks){
        if (arguments.length === 1 && typeof fields === "object" && !("saveContext" in fields)) {
            // fields is not a BaseMemory
            const { memory, callbackManager, ...rest } = fields;
            super({
                ...rest,
                callbacks: callbackManager ?? rest.callbacks
            });
            this.memory = memory;
        } else {
            // fields is a BaseMemory
            super({
                verbose,
                callbacks
            });
            this.memory = fields;
        }
    }
    /** @ignore */ _selectMemoryInputs(values) {
        const valuesForMemory = {
            ...values
        };
        if ("signal" in valuesForMemory) {
            delete valuesForMemory.signal;
        }
        if ("timeout" in valuesForMemory) {
            delete valuesForMemory.timeout;
        }
        return valuesForMemory;
    }
    /**
     * Invoke the chain with the provided input and returns the output.
     * @param input Input values for the chain run.
     * @param config Optional configuration for the Runnable.
     * @returns Promise that resolves with the output of the chain run.
     */ async invoke(input, options) {
        const config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ensureConfig"])(options);
        const fullValues = await this._formatValues(input);
        const callbackManager_ = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$callbacks$2f$manager$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CallbackManager"].configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, {
            verbose: this.verbose
        });
        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);
        let outputValues;
        try {
            outputValues = await (fullValues.signal ? Promise.race([
                this._call(fullValues, runManager, config),
                new Promise((_, reject)=>{
                    fullValues.signal?.addEventListener("abort", ()=>{
                        reject(new Error("AbortError"));
                    });
                })
            ]) : this._call(fullValues, runManager, config));
        } catch (e) {
            await runManager?.handleChainError(e);
            throw e;
        }
        if (!(this.memory == null)) {
            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);
        }
        await runManager?.handleChainEnd(outputValues);
        // add the runManager's currentRunId to the outputValues
        Object.defineProperty(outputValues, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$outputs$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RUN_KEY"], {
            value: runManager ? {
                runId: runManager?.runId
            } : undefined,
            configurable: true
        });
        return outputValues;
    }
    _validateOutputs(outputs) {
        const missingKeys = this.outputKeys.filter((k)=>!(k in outputs));
        if (missingKeys.length) {
            throw new Error(`Missing output keys: ${missingKeys.join(", ")} from chain ${this._chainType()}`);
        }
    }
    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {
        this._validateOutputs(outputs);
        if (this.memory) {
            await this.memory.saveContext(inputs, outputs);
        }
        if (returnOnlyOutputs) {
            return outputs;
        }
        return {
            ...inputs,
            ...outputs
        };
    }
    /**
     * Return a json-like object representing this chain.
     */ serialize() {
        throw new Error("Method not implemented.");
    }
    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */ async run(// eslint-disable-next-line @typescript-eslint/no-explicit-any
    input, config) {
        const inputKeys = this.inputKeys.filter((k)=>!this.memory?.memoryKeys.includes(k) ?? true);
        const isKeylessInput = inputKeys.length <= 1;
        if (!isKeylessInput) {
            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const values = inputKeys.length ? {
            [inputKeys[0]]: input
        } : {};
        const returnValues = await this.call(values, config);
        const keys = Object.keys(returnValues);
        if (keys.length === 1) {
            return returnValues[keys[0]];
        }
        throw new Error("return values have multiple keys, `run` only supported when one key currently");
    }
    async _formatValues(values) {
        const fullValues = {
            ...values
        };
        if (fullValues.timeout && !fullValues.signal) {
            fullValues.signal = AbortSignal.timeout(fullValues.timeout);
            delete fullValues.timeout;
        }
        if (!(this.memory == null)) {
            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));
            for (const [key, value] of Object.entries(newValues)){
                fullValues[key] = value;
            }
        }
        return fullValues;
    }
    /**
     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.
     *
     * Run the core logic of this chain and add to output if desired.
     *
     * Wraps _call and handles memory.
     */ async call(values, config, /** @deprecated */ tags) {
        const parsedConfig = {
            tags,
            ...(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$callbacks$2f$manager$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseCallbackConfigArg"])(config)
        };
        return this.invoke(values, parsedConfig);
    }
    /**
     * @deprecated Use .batch() instead. Will be removed in 0.2.0.
     *
     * Call the chain on all inputs in the list
     */ async apply(inputs, config) {
        return Promise.all(inputs.map(async (i, idx)=>this.call(i, config?.[idx])));
    }
    /**
     * Load a chain from a json-like object describing it.
     */ static async deserialize(data, values = {}) {
        switch(data._type){
            case "llm_chain":
                {
                    const { LLMChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return LLMChain.deserialize(data);
                }
            case "sequential_chain":
                {
                    const { SequentialChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return SequentialChain.deserialize(data);
                }
            case "simple_sequential_chain":
                {
                    const { SimpleSequentialChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return SimpleSequentialChain.deserialize(data);
                }
            case "stuff_documents_chain":
                {
                    const { StuffDocumentsChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return StuffDocumentsChain.deserialize(data);
                }
            case "map_reduce_documents_chain":
                {
                    const { MapReduceDocumentsChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return MapReduceDocumentsChain.deserialize(data);
                }
            case "refine_documents_chain":
                {
                    const { RefineDocumentsChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return RefineDocumentsChain.deserialize(data);
                }
            case "vector_db_qa":
                {
                    const { VectorDBQAChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/vector_db_qa.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return VectorDBQAChain.deserialize(data, values);
                }
            case "api_chain":
                {
                    const { APIChain } = await __turbopack_context__.r("[project]/node_modules/langchain/dist/chains/api/api_chain.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i);
                    return APIChain.deserialize(data);
                }
            default:
                throw new Error(`Invalid prompt type in config: ${data._type}`);
        }
    }
}
}}),
"[project]/node_modules/langchain/dist/output_parsers/noop.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NoOpOutputParser": (()=>NoOpOutputParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$output_parsers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/output_parsers.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/output_parsers/base.js [app-route] (ecmascript)");
;
class NoOpOutputParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseOutputParser"] {
    constructor(){
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "langchain",
                "output_parsers",
                "default"
            ]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    static lc_name() {
        return "NoOpOutputParser";
    }
    /**
     * This method takes a string as input and returns the same string as
     * output. It does not perform any operations on the input string.
     * @param text The input string to be parsed.
     * @returns The same input string without any operations performed on it.
     */ parse(text) {
        return Promise.resolve(text);
    }
    /**
     * This method returns an empty string. It does not provide any formatting
     * instructions.
     * @returns An empty string, indicating no formatting instructions.
     */ getFormatInstructions() {
        return "";
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LLMChain": (()=>LLMChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/language_models/base.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/language_models/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$runnables$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/runnables.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/runnables/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$noop$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/noop.js [app-route] (ecmascript)");
;
;
;
;
;
function isBaseLanguageModel(llmLike) {
    return typeof llmLike._llmType === "function";
}
function _getLanguageModel(llmLike) {
    if (isBaseLanguageModel(llmLike)) {
        return llmLike;
    } else if ("bound" in llmLike && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Runnable"].isRunnable(llmLike.bound)) {
        return _getLanguageModel(llmLike.bound);
    } else if ("runnable" in llmLike && "fallbacks" in llmLike && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Runnable"].isRunnable(llmLike.runnable)) {
        return _getLanguageModel(llmLike.runnable);
    } else if ("default" in llmLike && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$runnables$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Runnable"].isRunnable(llmLike.default)) {
        return _getLanguageModel(llmLike.default);
    } else {
        throw new Error("Unable to extract BaseLanguageModel from llmLike object.");
    }
}
class LLMChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "LLMChain";
    }
    get inputKeys() {
        return this.prompt.inputVariables;
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "prompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "llm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "llmKwargs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "text"
        });
        Object.defineProperty(this, "outputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prompt = fields.prompt;
        this.llm = fields.llm;
        this.llmKwargs = fields.llmKwargs;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.outputParser = fields.outputParser ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$noop$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["NoOpOutputParser"]();
        if (this.prompt.outputParser) {
            if (fields.outputParser) {
                throw new Error("Cannot set both outputParser and prompt.outputParser");
            }
            this.outputParser = this.prompt.outputParser;
        }
    }
    getCallKeys() {
        const callKeys = "callKeys" in this.llm ? this.llm.callKeys : [];
        return callKeys;
    }
    /** @ignore */ _selectMemoryInputs(values) {
        const valuesForMemory = super._selectMemoryInputs(values);
        const callKeys = this.getCallKeys();
        for (const key of callKeys){
            if (key in values) {
                delete valuesForMemory[key];
            }
        }
        return valuesForMemory;
    }
    /** @ignore */ async _getFinalOutput(generations, promptValue, runManager) {
        let finalCompletion;
        if (this.outputParser) {
            finalCompletion = await this.outputParser.parseResultWithPrompt(generations, promptValue, runManager?.getChild());
        } else {
            finalCompletion = generations[0].text;
        }
        return finalCompletion;
    }
    /**
     * Run the core logic of this chain and add to output if desired.
     *
     * Wraps _call and handles memory.
     */ call(values, config) {
        return super.call(values, config);
    }
    /** @ignore */ async _call(values, runManager) {
        const valuesForPrompt = {
            ...values
        };
        const valuesForLLM = {
            ...this.llmKwargs
        };
        const callKeys = this.getCallKeys();
        for (const key of callKeys){
            if (key in values) {
                if ("TURBOPACK compile-time truthy", 1) {
                    valuesForLLM[key] = values[key];
                    delete valuesForPrompt[key];
                }
            }
        }
        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);
        if ("generatePrompt" in this.llm) {
            const { generations } = await this.llm.generatePrompt([
                promptValue
            ], valuesForLLM, runManager?.getChild());
            return {
                [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager)
            };
        }
        const modelWithParser = this.outputParser ? this.llm.pipe(this.outputParser) : this.llm;
        const response = await modelWithParser.invoke(promptValue, runManager?.getChild());
        return {
            [this.outputKey]: response
        };
    }
    /**
     * Format prompt with values and pass to LLM
     *
     * @param values - keys to pass to prompt template
     * @param callbackManager - CallbackManager to use
     * @returns Completion from LLM.
     *
     * @example
     * ```ts
     * llm.predict({ adjective: "funny" })
     * ```
     */ async predict(values, callbackManager) {
        const output = await this.call(values, callbackManager);
        return output[this.outputKey];
    }
    _chainType() {
        return "llm";
    }
    static async deserialize(data) {
        const { llm, prompt } = data;
        if (!llm) {
            throw new Error("LLMChain must have llm");
        }
        if (!prompt) {
            throw new Error("LLMChain must have prompt");
        }
        return new LLMChain({
            llm: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$language_models$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseLanguageModel"].deserialize(llm),
            prompt: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BasePromptTemplate"].deserialize(prompt)
        });
    }
    /** @deprecated */ serialize() {
        const serialize = "serialize" in this.llm ? this.llm.serialize() : undefined;
        return {
            _type: `${this._chainType()}_chain`,
            llm: serialize,
            prompt: this.prompt.serialize()
        };
    }
    _getNumTokens(text) {
        return _getLanguageModel(this.llm).getNumTokens(text);
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/api/prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable spaced-comment */ __turbopack_context__.s({
    "API_RESPONSE_PROMPT_TEMPLATE": (()=>API_RESPONSE_PROMPT_TEMPLATE),
    "API_RESPONSE_RAW_PROMPT_TEMPLATE": (()=>API_RESPONSE_RAW_PROMPT_TEMPLATE),
    "API_URL_PROMPT_TEMPLATE": (()=>API_URL_PROMPT_TEMPLATE),
    "API_URL_RAW_PROMPT_TEMPLATE": (()=>API_URL_RAW_PROMPT_TEMPLATE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
;
const API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:
{api_docs}
Using this documentation, generate the full API url to call for answering the user question.
You should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.

Question:{question}
API url:`;
const API_URL_PROMPT_TEMPLATE = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    inputVariables: [
        "api_docs",
        "question"
    ],
    template: API_URL_RAW_PROMPT_TEMPLATE
});
const API_RESPONSE_RAW_PROMPT_TEMPLATE = `${API_URL_RAW_PROMPT_TEMPLATE} {api_url}

Here is the response from the API:

{api_response}

Summarize this response to answer the original question.

Summary:`;
const API_RESPONSE_PROMPT_TEMPLATE = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    inputVariables: [
        "api_docs",
        "question",
        "api_url",
        "api_response"
    ],
    template: API_RESPONSE_RAW_PROMPT_TEMPLATE
});
}}),
"[project]/node_modules/langchain/dist/chains/api/api_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "APIChain": (()=>APIChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$api$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/api/prompts.js [app-route] (ecmascript)");
;
;
;
class APIChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "apiAnswerChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiRequestChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiDocs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "question"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "output"
        });
        this.apiRequestChain = fields.apiRequestChain;
        this.apiAnswerChain = fields.apiAnswerChain;
        this.apiDocs = fields.apiDocs;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.headers = fields.headers ?? this.headers;
    }
    /** @ignore */ async _call(values, runManager) {
        const question = values[this.inputKey];
        const api_url = await this.apiRequestChain.predict({
            question,
            api_docs: this.apiDocs
        }, runManager?.getChild("request"));
        const res = await fetch(api_url, {
            headers: this.headers
        });
        const api_response = await res.text();
        const answer = await this.apiAnswerChain.predict({
            question,
            api_docs: this.apiDocs,
            api_url,
            api_response
        }, runManager?.getChild("response"));
        return {
            [this.outputKey]: answer
        };
    }
    _chainType() {
        return "api_chain";
    }
    static async deserialize(data) {
        const { api_request_chain, api_answer_chain, api_docs } = data;
        if (!api_request_chain) {
            throw new Error("LLMChain must have api_request_chain");
        }
        if (!api_answer_chain) {
            throw new Error("LLMChain must have api_answer_chain");
        }
        if (!api_docs) {
            throw new Error("LLMChain must have api_docs");
        }
        return new APIChain({
            apiAnswerChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(api_answer_chain),
            apiRequestChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(api_request_chain),
            apiDocs: api_docs
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            api_answer_chain: this.apiAnswerChain.serialize(),
            api_request_chain: this.apiRequestChain.serialize(),
            api_docs: this.apiDocs
        };
    }
    /**
     * Static method to create a new APIChain from a BaseLanguageModel and API
     * documentation.
     * @param llm BaseLanguageModel instance.
     * @param apiDocs API documentation.
     * @param options Optional configuration options for the APIChain.
     * @returns New APIChain instance.
     */ static fromLLMAndAPIDocs(llm, apiDocs, options = {}) {
        const { apiUrlPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$api$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["API_URL_PROMPT_TEMPLATE"], apiResponsePrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$api$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["API_RESPONSE_PROMPT_TEMPLATE"] } = options;
        const apiRequestChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: apiUrlPrompt,
            llm
        });
        const apiAnswerChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: apiResponsePrompt,
            llm
        });
        return new this({
            apiAnswerChain,
            apiRequestChain,
            apiDocs,
            ...options
        });
    }
}
}}),
"[project]/node_modules/langchain/dist/stores/message/in_memory.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$chat_history$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/chat_history.js [app-route] (ecmascript) <module evaluation>");
;
}}),
"[project]/node_modules/langchain/dist/stores/message/in_memory.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$chat_history$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/chat_history.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$stores$2f$message$2f$in_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/stores/message/in_memory.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/dist/memory/chat_memory.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseChatMemory": (()=>BaseChatMemory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/memory.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/memory.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$stores$2f$message$2f$in_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/stores/message/in_memory.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$chat_history$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__InMemoryChatMessageHistory__as__ChatMessageHistory$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/chat_history.js [app-route] (ecmascript) <export InMemoryChatMessageHistory as ChatMessageHistory>");
;
;
class BaseChatMemory extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseMemory"] {
    constructor(fields){
        super();
        Object.defineProperty(this, "chatHistory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnMessages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chatHistory = fields?.chatHistory ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$chat_history$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__InMemoryChatMessageHistory__as__ChatMessageHistory$3e$__["ChatMessageHistory"]();
        this.returnMessages = fields?.returnMessages ?? this.returnMessages;
        this.inputKey = fields?.inputKey ?? this.inputKey;
        this.outputKey = fields?.outputKey ?? this.outputKey;
    }
    /**
     * Method to add user and AI messages to the chat history in sequence.
     * @param inputValues The input values from the user.
     * @param outputValues The output values from the AI.
     * @returns Promise that resolves when the context has been saved.
     */ async saveContext(inputValues, outputValues) {
        // this is purposefully done in sequence so they're saved in order
        await this.chatHistory.addUserMessage((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getInputValue"])(inputValues, this.inputKey));
        await this.chatHistory.addAIChatMessage((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getOutputValue"])(outputValues, this.outputKey));
    }
    /**
     * Method to clear the chat history.
     * @returns Promise that resolves when the chat history has been cleared.
     */ async clear() {
        await this.chatHistory.clear();
    }
}
}}),
"[project]/node_modules/langchain/dist/memory/buffer_memory.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BufferMemory": (()=>BufferMemory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$messages$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/messages.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/messages/utils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$memory$2f$chat_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/memory/chat_memory.js [app-route] (ecmascript)");
;
;
class BufferMemory extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$memory$2f$chat_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChatMemory"] {
    constructor(fields){
        super({
            chatHistory: fields?.chatHistory,
            returnMessages: fields?.returnMessages ?? false,
            inputKey: fields?.inputKey,
            outputKey: fields?.outputKey
        });
        Object.defineProperty(this, "humanPrefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Human"
        });
        Object.defineProperty(this, "aiPrefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AI"
        });
        Object.defineProperty(this, "memoryKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "history"
        });
        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;
        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;
        this.memoryKey = fields?.memoryKey ?? this.memoryKey;
    }
    get memoryKeys() {
        return [
            this.memoryKey
        ];
    }
    /**
     * Loads the memory variables. It takes an `InputValues` object as a
     * parameter and returns a `Promise` that resolves with a
     * `MemoryVariables` object.
     * @param _values `InputValues` object.
     * @returns A `Promise` that resolves with a `MemoryVariables` object.
     */ async loadMemoryVariables(_values) {
        const messages = await this.chatHistory.getMessages();
        if (this.returnMessages) {
            const result = {
                [this.memoryKey]: messages
            };
            return result;
        }
        const result = {
            [this.memoryKey]: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBufferString"])(messages, this.humanPrefix, this.aiPrefix)
        };
        return result;
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/conversation.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConversationChain": (()=>ConversationChain),
    "DEFAULT_TEMPLATE": (()=>DEFAULT_TEMPLATE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$memory$2f$buffer_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/memory/buffer_memory.js [app-route] (ecmascript)");
;
;
;
const DEFAULT_TEMPLATE = `The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.

Current conversation:
{history}
Human: {input}
AI:`;
class ConversationChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"] {
    static lc_name() {
        return "ConversationChain";
    }
    constructor({ prompt, outputKey, memory, ...rest }){
        super({
            prompt: prompt ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
                template: DEFAULT_TEMPLATE,
                inputVariables: [
                    "history",
                    "input"
                ]
            }),
            outputKey: outputKey ?? "response",
            memory: memory ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$memory$2f$buffer_memory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BufferMemory"](),
            ...rest
        });
    }
}
}}),
"[project]/node_modules/langchain/dist/util/set.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations
 */ /**
 * returns intersection of two sets
 */ __turbopack_context__.s({
    "difference": (()=>difference),
    "intersection": (()=>intersection),
    "union": (()=>union)
});
function intersection(setA, setB) {
    const _intersection = new Set();
    for (const elem of setB){
        if (setA.has(elem)) {
            _intersection.add(elem);
        }
    }
    return _intersection;
}
function union(setA, setB) {
    const _union = new Set(setA);
    for (const elem of setB){
        _union.add(elem);
    }
    return _union;
}
function difference(setA, setB) {
    const _difference = new Set(setA);
    for (const elem of setB){
        _difference.delete(elem);
    }
    return _difference;
}
}}),
"[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SequentialChain": (()=>SequentialChain),
    "SimpleSequentialChain": (()=>SimpleSequentialChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/util/set.js [app-route] (ecmascript)");
;
;
function formatSet(input) {
    return Array.from(input).map((i)=>`"${i}"`).join(", ");
}
class SequentialChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "SequentialChain";
    }
    get inputKeys() {
        return this.inputVariables;
    }
    get outputKeys() {
        return this.outputVariables;
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "chains", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnAll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chains = fields.chains;
        this.inputVariables = fields.inputVariables;
        this.outputVariables = fields.outputVariables ?? [];
        if (this.outputVariables.length > 0 && fields.returnAll) {
            throw new Error("Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.");
        }
        this.returnAll = fields.returnAll ?? false;
        this._validateChains();
    }
    /** @ignore */ _validateChains() {
        if (this.chains.length === 0) {
            throw new Error("Sequential chain must have at least one chain.");
        }
        const memoryKeys = this.memory?.memoryKeys ?? [];
        const inputKeysSet = new Set(this.inputKeys);
        const memoryKeysSet = new Set(memoryKeys);
        const keysIntersection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["intersection"])(inputKeysSet, memoryKeysSet);
        if (keysIntersection.size > 0) {
            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);
        }
        const availableKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["union"])(inputKeysSet, memoryKeysSet);
        for (const chain of this.chains){
            let missingKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["difference"])(new Set(chain.inputKeys), availableKeys);
            if (chain.memory) {
                missingKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["difference"])(missingKeys, new Set(chain.memory.memoryKeys));
            }
            if (missingKeys.size > 0) {
                throw new Error(`Missing variables for chain "${chain._chainType()}": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);
            }
            const outputKeysSet = new Set(chain.outputKeys);
            const overlappingOutputKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["intersection"])(availableKeys, outputKeysSet);
            if (overlappingOutputKeys.size > 0) {
                throw new Error(`The following output variables for chain "${chain._chainType()}" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);
            }
            for (const outputKey of outputKeysSet){
                availableKeys.add(outputKey);
            }
        }
        if (this.outputVariables.length === 0) {
            if (this.returnAll) {
                const outputKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["difference"])(availableKeys, inputKeysSet);
                this.outputVariables = Array.from(outputKeys);
            } else {
                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;
            }
        } else {
            const missingKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$set$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["difference"])(new Set(this.outputVariables), new Set(availableKeys));
            if (missingKeys.size > 0) {
                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);
            }
        }
    }
    /** @ignore */ async _call(values, runManager) {
        let input = {};
        const allChainValues = values;
        let i = 0;
        for (const chain of this.chains){
            i += 1;
            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));
            for (const key of Object.keys(input)){
                allChainValues[key] = input[key];
            }
        }
        const output = {};
        for (const key of this.outputVariables){
            output[key] = allChainValues[key];
        }
        return output;
    }
    _chainType() {
        return "sequential_chain";
    }
    static async deserialize(data) {
        const chains = [];
        const inputVariables = data.input_variables;
        const outputVariables = data.output_variables;
        const serializedChains = data.chains;
        for (const serializedChain of serializedChains){
            const deserializedChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"].deserialize(serializedChain);
            chains.push(deserializedChain);
        }
        return new SequentialChain({
            chains,
            inputVariables,
            outputVariables
        });
    }
    serialize() {
        const chains = [];
        for (const chain of this.chains){
            chains.push(chain.serialize());
        }
        return {
            _type: this._chainType(),
            input_variables: this.inputVariables,
            output_variables: this.outputVariables,
            chains
        };
    }
}
class SimpleSequentialChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "SimpleSequentialChain";
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "chains", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "output"
        });
        Object.defineProperty(this, "trimOutputs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chains = fields.chains;
        this.trimOutputs = fields.trimOutputs ?? false;
        this._validateChains();
    }
    /** @ignore */ _validateChains() {
        for (const chain of this.chains){
            if (chain.inputKeys.filter((k)=>!chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {
                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);
            }
            if (chain.outputKeys.length !== 1) {
                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);
            }
        }
    }
    /** @ignore */ async _call(values, runManager) {
        let input = values[this.inputKey];
        let i = 0;
        for (const chain of this.chains){
            i += 1;
            input = (await chain.call({
                [chain.inputKeys[0]]: input,
                signal: values.signal
            }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];
            if (this.trimOutputs) {
                input = input.trim();
            }
            await runManager?.handleText(input);
        }
        return {
            [this.outputKey]: input
        };
    }
    _chainType() {
        return "simple_sequential_chain";
    }
    static async deserialize(data) {
        const chains = [];
        const serializedChains = data.chains;
        for (const serializedChain of serializedChains){
            const deserializedChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"].deserialize(serializedChain);
            chains.push(deserializedChain);
        }
        return new SimpleSequentialChain({
            chains
        });
    }
    serialize() {
        const chains = [];
        for (const chain of this.chains){
            chains.push(chain.serialize());
        }
        return {
            _type: this._chainType(),
            chains
        };
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MapReduceDocumentsChain": (()=>MapReduceDocumentsChain),
    "RefineDocumentsChain": (()=>RefineDocumentsChain),
    "StuffDocumentsChain": (()=>StuffDocumentsChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
;
;
;
class StuffDocumentsChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "StuffDocumentsChain";
    }
    get inputKeys() {
        return [
            this.inputKey,
            ...this.llmChain.inputKeys
        ].filter((key)=>key !== this.documentVariableName);
    }
    get outputKeys() {
        return this.llmChain.outputKeys;
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "llmChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input_documents"
        });
        Object.defineProperty(this, "documentVariableName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "context"
        });
        this.llmChain = fields.llmChain;
        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;
        this.inputKey = fields.inputKey ?? this.inputKey;
    }
    /** @ignore */ _prepInputs(values) {
        if (!(this.inputKey in values)) {
            throw new Error(`Document key ${this.inputKey} not found.`);
        }
        const { [this.inputKey]: docs, ...rest } = values;
        const texts = docs.map(({ pageContent })=>pageContent);
        const text = texts.join("\n\n");
        return {
            ...rest,
            [this.documentVariableName]: text
        };
    }
    /** @ignore */ async _call(values, runManager) {
        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild("combine_documents"));
        return result;
    }
    _chainType() {
        return "stuff_documents_chain";
    }
    static async deserialize(data) {
        if (!data.llm_chain) {
            throw new Error("Missing llm_chain");
        }
        return new StuffDocumentsChain({
            llmChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(data.llm_chain)
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            llm_chain: this.llmChain.serialize()
        };
    }
}
class MapReduceDocumentsChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "MapReduceDocumentsChain";
    }
    get inputKeys() {
        return [
            this.inputKey,
            ...this.combineDocumentChain.inputKeys
        ];
    }
    get outputKeys() {
        return this.combineDocumentChain.outputKeys;
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "llmChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input_documents"
        });
        Object.defineProperty(this, "documentVariableName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "context"
        });
        Object.defineProperty(this, "returnIntermediateSteps", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "maxTokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 3000
        });
        Object.defineProperty(this, "maxIterations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 10
        });
        Object.defineProperty(this, "ensureMapStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "combineDocumentChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.llmChain = fields.llmChain;
        this.combineDocumentChain = fields.combineDocumentChain;
        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;
        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.maxTokens = fields.maxTokens ?? this.maxTokens;
        this.maxIterations = fields.maxIterations ?? this.maxIterations;
        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Document key ${this.inputKey} not found.`);
        }
        const { [this.inputKey]: docs, ...rest } = values;
        let currentDocs = docs;
        let intermediateSteps = [];
        // For each iteration, we'll use the `llmChain` to get a new result
        for(let i = 0; i < this.maxIterations; i += 1){
            const inputs = currentDocs.map((d)=>({
                    [this.documentVariableName]: d.pageContent,
                    ...rest
                }));
            const canSkipMapStep = i !== 0 || !this.ensureMapStep;
            if (canSkipMapStep) {
                // Calculate the total tokens required in the input
                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({
                    [this.combineDocumentChain.inputKey]: currentDocs,
                    ...rest
                }));
                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);
                const withinTokenLimit = length < this.maxTokens;
                // If we can skip the map step, and we're within the token limit, we don't
                // need to run the map step, so just break out of the loop.
                if (withinTokenLimit) {
                    break;
                }
            }
            const results = await this.llmChain.apply(inputs, // If we have a runManager, then we need to create a child for each input
            // so that we can track the progress of each input.
            runManager ? Array.from({
                length: inputs.length
            }, (_, i)=>runManager.getChild(`map_${i + 1}`)) : undefined);
            const { outputKey } = this.llmChain;
            // If the flag is set, then concat that to the intermediate steps
            if (this.returnIntermediateSteps) {
                intermediateSteps = intermediateSteps.concat(results.map((r)=>r[outputKey]));
            }
            currentDocs = results.map((r)=>({
                    pageContent: r[outputKey],
                    metadata: {}
                }));
        }
        // Now, with the final result of all the inputs from the `llmChain`, we can
        // run the `combineDocumentChain` over them.
        const newInputs = {
            [this.combineDocumentChain.inputKey]: currentDocs,
            ...rest
        };
        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild("combine_documents"));
        // Return the intermediate steps results if the flag is set
        if (this.returnIntermediateSteps) {
            return {
                ...result,
                intermediateSteps
            };
        }
        return result;
    }
    _chainType() {
        return "map_reduce_documents_chain";
    }
    static async deserialize(data) {
        if (!data.llm_chain) {
            throw new Error("Missing llm_chain");
        }
        if (!data.combine_document_chain) {
            throw new Error("Missing combine_document_chain");
        }
        return new MapReduceDocumentsChain({
            llmChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(data.llm_chain),
            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain)
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            llm_chain: this.llmChain.serialize(),
            combine_document_chain: this.combineDocumentChain.serialize()
        };
    }
}
class RefineDocumentsChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "RefineDocumentsChain";
    }
    get defaultDocumentPrompt() {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
            inputVariables: [
                "page_content"
            ],
            template: "{page_content}"
        });
    }
    get inputKeys() {
        return [
            ...new Set([
                this.inputKey,
                ...this.llmChain.inputKeys,
                ...this.refineLLMChain.inputKeys
            ])
        ].filter((key)=>key !== this.documentVariableName && key !== this.initialResponseName);
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "llmChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input_documents"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "output_text"
        });
        Object.defineProperty(this, "documentVariableName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "context"
        });
        Object.defineProperty(this, "initialResponseName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "existing_answer"
        });
        Object.defineProperty(this, "refineLLMChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "documentPrompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.defaultDocumentPrompt
        });
        this.llmChain = fields.llmChain;
        this.refineLLMChain = fields.refineLLMChain;
        this.documentVariableName = fields.documentVariableName ?? this.documentVariableName;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;
        this.initialResponseName = fields.initialResponseName ?? this.initialResponseName;
    }
    /** @ignore */ async _constructInitialInputs(doc, rest) {
        const baseInfo = {
            page_content: doc.pageContent,
            ...doc.metadata
        };
        const documentInfo = {};
        this.documentPrompt.inputVariables.forEach((value)=>{
            documentInfo[value] = baseInfo[value];
        });
        const baseInputs = {
            [this.documentVariableName]: await this.documentPrompt.format({
                ...documentInfo
            })
        };
        const inputs = {
            ...baseInputs,
            ...rest
        };
        return inputs;
    }
    /** @ignore */ async _constructRefineInputs(doc, res) {
        const baseInfo = {
            page_content: doc.pageContent,
            ...doc.metadata
        };
        const documentInfo = {};
        this.documentPrompt.inputVariables.forEach((value)=>{
            documentInfo[value] = baseInfo[value];
        });
        const baseInputs = {
            [this.documentVariableName]: await this.documentPrompt.format({
                ...documentInfo
            })
        };
        const inputs = {
            [this.initialResponseName]: res,
            ...baseInputs
        };
        return inputs;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Document key ${this.inputKey} not found.`);
        }
        const { [this.inputKey]: docs, ...rest } = values;
        const currentDocs = docs;
        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);
        let res = await this.llmChain.predict({
            ...initialInputs
        }, runManager?.getChild("answer"));
        const refineSteps = [
            res
        ];
        for(let i = 1; i < currentDocs.length; i += 1){
            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);
            const inputs = {
                ...refineInputs,
                ...rest
            };
            res = await this.refineLLMChain.predict({
                ...inputs
            }, runManager?.getChild("refine"));
            refineSteps.push(res);
        }
        return {
            [this.outputKey]: res
        };
    }
    _chainType() {
        return "refine_documents_chain";
    }
    static async deserialize(data) {
        const SerializedLLMChain = data.llm_chain;
        if (!SerializedLLMChain) {
            throw new Error("Missing llm_chain");
        }
        const SerializedRefineDocumentChain = data.refine_llm_chain;
        if (!SerializedRefineDocumentChain) {
            throw new Error("Missing refine_llm_chain");
        }
        return new RefineDocumentsChain({
            llmChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(SerializedLLMChain),
            refineLLMChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(SerializedRefineDocumentChain)
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            llm_chain: this.llmChain.serialize(),
            refine_llm_chain: this.refineLLMChain.serialize()
        };
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/question_answering/stuff_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable spaced-comment */ __turbopack_context__.s({
    "DEFAULT_QA_PROMPT": (()=>DEFAULT_QA_PROMPT),
    "QA_PROMPT_SELECTOR": (()=>QA_PROMPT_SELECTOR)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/chat.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$example_selectors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/example_selectors.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/example_selectors/conditional.js [app-route] (ecmascript)");
;
;
const DEFAULT_QA_PROMPT = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    template: "Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n{context}\n\nQuestion: {question}\nHelpful Answer:",
    inputVariables: [
        "context",
        "question"
    ]
});
const system_template = `Use the following pieces of context to answer the users question. 
If you don't know the answer, just say that you don't know, don't try to make up an answer.
----------------
{context}`;
const messages = [
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SystemMessagePromptTemplate"].fromTemplate(system_template),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("{question}")
];
const CHAT_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages(messages);
const QA_PROMPT_SELECTOR = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConditionalPromptSelector"](DEFAULT_QA_PROMPT, [
    [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isChatModel"],
        CHAT_PROMPT
    ]
]);
}}),
"[project]/node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable spaced-comment */ __turbopack_context__.s({
    "COMBINE_PROMPT": (()=>COMBINE_PROMPT),
    "COMBINE_PROMPT_SELECTOR": (()=>COMBINE_PROMPT_SELECTOR),
    "COMBINE_QA_PROMPT_SELECTOR": (()=>COMBINE_QA_PROMPT_SELECTOR),
    "DEFAULT_COMBINE_QA_PROMPT": (()=>DEFAULT_COMBINE_QA_PROMPT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/chat.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$example_selectors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/example_selectors.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/example_selectors/conditional.js [app-route] (ecmascript)");
;
;
const qa_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. 
Return any relevant text verbatim.
{context}
Question: {question}
Relevant text, if any:`;
const DEFAULT_COMBINE_QA_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(qa_template);
const system_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. 
Return any relevant text verbatim.
----------------
{context}`;
const messages = [
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SystemMessagePromptTemplate"].fromTemplate(system_template),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("{question}")
];
const CHAT_QA_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages(messages);
const COMBINE_QA_PROMPT_SELECTOR = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConditionalPromptSelector"](DEFAULT_COMBINE_QA_PROMPT, [
    [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isChatModel"],
        CHAT_QA_PROMPT
    ]
]);
const combine_prompt = `Given the following extracted parts of a long document and a question, create a final answer. 
If you don't know the answer, just say that you don't know. Don't try to make up an answer.

QUESTION: Which state/country's law governs the interpretation of the contract?
=========
Content: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.

Content: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n\n11.9 No Third-Party Beneficiaries.

Content: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,
=========
FINAL ANSWER: This Agreement is governed by English law.

QUESTION: What did the president say about Michael Jackson?
=========
Content: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.

Content: And we won’t stop. \n\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n\nOfficer Mora was 27 years old. \n\nOfficer Rivera was 22. \n\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.

Content: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n\nBut I want you to know that we are going to be okay.

Content: More support for patients and families. \n\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n\nA unity agenda for the nation. \n\nWe can do this. \n\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \n\nNow is the hour. \n\nOur moment of responsibility. \n\nOur test of resolve and conscience, of history itself. \n\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \n\nWell I know this nation.
=========
FINAL ANSWER: The president did not mention Michael Jackson.

QUESTION: {question}
=========
{summaries}
=========
FINAL ANSWER:`;
const COMBINE_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(combine_prompt);
const system_combine_template = `Given the following extracted parts of a long document and a question, create a final answer. 
If you don't know the answer, just say that you don't know. Don't try to make up an answer.
----------------
{summaries}`;
const combine_messages = [
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SystemMessagePromptTemplate"].fromTemplate(system_combine_template),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("{question}")
];
const CHAT_COMBINE_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages(combine_messages);
const COMBINE_PROMPT_SELECTOR = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConditionalPromptSelector"](COMBINE_PROMPT, [
    [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isChatModel"],
        CHAT_COMBINE_PROMPT
    ]
]);
}}),
"[project]/node_modules/langchain/dist/chains/question_answering/refine_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable spaced-comment */ __turbopack_context__.s({
    "CHAT_QUESTION_PROMPT": (()=>CHAT_QUESTION_PROMPT),
    "CHAT_REFINE_PROMPT": (()=>CHAT_REFINE_PROMPT),
    "DEFAULT_REFINE_PROMPT": (()=>DEFAULT_REFINE_PROMPT),
    "DEFAULT_REFINE_PROMPT_TMPL": (()=>DEFAULT_REFINE_PROMPT_TMPL),
    "DEFAULT_TEXT_QA_PROMPT": (()=>DEFAULT_TEXT_QA_PROMPT),
    "DEFAULT_TEXT_QA_PROMPT_TMPL": (()=>DEFAULT_TEXT_QA_PROMPT_TMPL),
    "QUESTION_PROMPT_SELECTOR": (()=>QUESTION_PROMPT_SELECTOR),
    "REFINE_PROMPT_SELECTOR": (()=>REFINE_PROMPT_SELECTOR)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/chat.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$example_selectors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/example_selectors.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/example_selectors/conditional.js [app-route] (ecmascript)");
;
;
const DEFAULT_REFINE_PROMPT_TMPL = `The original question is as follows: {question}
We have provided an existing answer: {existing_answer}
We have the opportunity to refine the existing answer
(only if needed) with some more context below.
------------
{context}
------------
Given the new context, refine the original answer to better answer the question. 
If the context isn't useful, return the original answer.`;
const DEFAULT_REFINE_PROMPT = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    inputVariables: [
        "question",
        "existing_answer",
        "context"
    ],
    template: DEFAULT_REFINE_PROMPT_TMPL
});
const refineTemplate = `The original question is as follows: {question}
We have provided an existing answer: {existing_answer}
We have the opportunity to refine the existing answer
(only if needed) with some more context below.
------------
{context}
------------
Given the new context, refine the original answer to better answer the question. 
If the context isn't useful, return the original answer.`;
const messages = [
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("{question}"),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AIMessagePromptTemplate"].fromTemplate("{existing_answer}"),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate(refineTemplate)
];
const CHAT_REFINE_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages(messages);
const REFINE_PROMPT_SELECTOR = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConditionalPromptSelector"](DEFAULT_REFINE_PROMPT, [
    [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isChatModel"],
        CHAT_REFINE_PROMPT
    ]
]);
const DEFAULT_TEXT_QA_PROMPT_TMPL = `Context information is below. 
---------------------
{context}
---------------------
Given the context information and no prior knowledge, answer the question: {question}`;
const DEFAULT_TEXT_QA_PROMPT = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    inputVariables: [
        "context",
        "question"
    ],
    template: DEFAULT_TEXT_QA_PROMPT_TMPL
});
const chat_qa_prompt_template = `Context information is below. 
---------------------
{context}
---------------------
Given the context information and no prior knowledge, answer any questions`;
const chat_messages = [
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SystemMessagePromptTemplate"].fromTemplate(chat_qa_prompt_template),
    /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("{question}")
];
const CHAT_QUESTION_PROMPT = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages(chat_messages);
const QUESTION_PROMPT_SELECTOR = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConditionalPromptSelector"](DEFAULT_TEXT_QA_PROMPT, [
    [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$example_selectors$2f$conditional$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isChatModel"],
        CHAT_QUESTION_PROMPT
    ]
]);
}}),
"[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadQAChain": (()=>loadQAChain),
    "loadQAMapReduceChain": (()=>loadQAMapReduceChain),
    "loadQARefineChain": (()=>loadQARefineChain),
    "loadQAStuffChain": (()=>loadQAStuffChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/stuff_prompts.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$map_reduce_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$refine_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/refine_prompts.js [app-route] (ecmascript)");
;
;
;
;
;
const loadQAChain = (llm, params = {
    type: "stuff"
})=>{
    const { type } = params;
    if (type === "stuff") {
        return loadQAStuffChain(llm, params);
    }
    if (type === "map_reduce") {
        return loadQAMapReduceChain(llm, params);
    }
    if (type === "refine") {
        return loadQARefineChain(llm, params);
    }
    throw new Error(`Invalid _type: ${type}`);
};
function loadQAStuffChain(llm, params = {}) {
    const { prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["QA_PROMPT_SELECTOR"].getPrompt(llm), verbose } = params;
    const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        prompt,
        llm,
        verbose
    });
    const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StuffDocumentsChain"]({
        llmChain,
        verbose
    });
    return chain;
}
function loadQAMapReduceChain(llm, params = {}) {
    const { combineMapPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$map_reduce_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["COMBINE_QA_PROMPT_SELECTOR"].getPrompt(llm), combinePrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$map_reduce_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["COMBINE_PROMPT_SELECTOR"].getPrompt(llm), verbose, combineLLM, returnIntermediateSteps } = params;
    const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        prompt: combineMapPrompt,
        llm,
        verbose
    });
    const combineLLMChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        prompt: combinePrompt,
        llm: combineLLM ?? llm,
        verbose
    });
    const combineDocumentChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StuffDocumentsChain"]({
        llmChain: combineLLMChain,
        documentVariableName: "summaries",
        verbose
    });
    const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapReduceDocumentsChain"]({
        llmChain,
        combineDocumentChain,
        returnIntermediateSteps,
        verbose
    });
    return chain;
}
function loadQARefineChain(llm, params = {}) {
    const { questionPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$refine_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["QUESTION_PROMPT_SELECTOR"].getPrompt(llm), refinePrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$refine_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["REFINE_PROMPT_SELECTOR"].getPrompt(llm), refineLLM, verbose } = params;
    const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        prompt: questionPrompt,
        llm,
        verbose
    });
    const refineLLMChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        prompt: refinePrompt,
        llm: refineLLM ?? llm,
        verbose
    });
    const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RefineDocumentsChain"]({
        llmChain,
        refineLLMChain,
        verbose
    });
    return chain;
}
}}),
"[project]/node_modules/langchain/dist/chains/chat_vector_db_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ChatVectorDBQAChain": (()=>ChatVectorDBQAChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
;
;
;
;
const question_generator_template = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.

Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:`;
const qa_template = `Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.

{context}

Question: {question}
Helpful Answer:`;
class ChatVectorDBQAChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    get inputKeys() {
        return [
            this.inputKey,
            this.chatHistoryKey
        ];
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "k", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 4
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "question"
        });
        Object.defineProperty(this, "chatHistoryKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "chat_history"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "result"
        });
        Object.defineProperty(this, "vectorstore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "questionGeneratorChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnSourceDocuments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.vectorstore = fields.vectorstore;
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.questionGeneratorChain = fields.questionGeneratorChain;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.k = fields.k ?? this.k;
        this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Question key ${this.inputKey} not found.`);
        }
        if (!(this.chatHistoryKey in values)) {
            throw new Error(`chat history key ${this.inputKey} not found.`);
        }
        const question = values[this.inputKey];
        const chatHistory = values[this.chatHistoryKey];
        let newQuestion = question;
        if (chatHistory.length > 0) {
            const result = await this.questionGeneratorChain.call({
                question,
                chat_history: chatHistory
            }, runManager?.getChild("question_generator"));
            const keys = Object.keys(result);
            console.log("_call", values, keys);
            if (keys.length === 1) {
                newQuestion = result[keys[0]];
            } else {
                throw new Error("Return from llm chain has multiple values, only single values supported.");
            }
        }
        const docs = await this.vectorstore.similaritySearch(newQuestion, this.k, undefined, runManager?.getChild("vectorstore"));
        const inputs = {
            question: newQuestion,
            input_documents: docs,
            chat_history: chatHistory
        };
        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild("combine_documents"));
        if (this.returnSourceDocuments) {
            return {
                ...result,
                sourceDocuments: docs
            };
        }
        return result;
    }
    _chainType() {
        return "chat-vector-db";
    }
    static async deserialize(data, values) {
        if (!("vectorstore" in values)) {
            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);
        }
        const { vectorstore } = values;
        return new ChatVectorDBQAChain({
            combineDocumentsChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"].deserialize(data.combine_documents_chain),
            questionGeneratorChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"].deserialize(data.question_generator),
            k: data.k,
            vectorstore
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            combine_documents_chain: this.combineDocumentsChain.serialize(),
            question_generator: this.questionGeneratorChain.serialize(),
            k: this.k
        };
    }
    /**
     * Creates an instance of ChatVectorDBQAChain using a BaseLanguageModel
     * and other options.
     * @param llm Instance of BaseLanguageModel used to generate a new question.
     * @param vectorstore Instance of VectorStore used for vector operations.
     * @param options (Optional) Additional options for creating the ChatVectorDBQAChain instance.
     * @returns New instance of ChatVectorDBQAChain.
     */ static fromLLM(llm, vectorstore, options = {}) {
        const { questionGeneratorTemplate, qaTemplate, verbose, ...rest } = options;
        const question_generator_prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(questionGeneratorTemplate || question_generator_template);
        const qa_prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(qaTemplate || qa_template);
        const qaChain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["loadQAStuffChain"])(llm, {
            prompt: qa_prompt,
            verbose
        });
        const questionGeneratorChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: question_generator_prompt,
            llm,
            verbose
        });
        const instance = new this({
            vectorstore,
            combineDocumentsChain: qaChain,
            questionGeneratorChain,
            ...rest
        });
        return instance;
    }
}
}}),
"[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$textsplitters$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/textsplitters/index.js [app-route] (ecmascript) <module evaluation>");
;
}}),
"[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$textsplitters$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/textsplitters/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/dist/chains/analyze_documents_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AnalyzeDocumentChain": (()=>AnalyzeDocumentChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$textsplitters$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/textsplitters/dist/text_splitter.js [app-route] (ecmascript)");
;
;
class AnalyzeDocumentChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "AnalyzeDocumentChain";
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input_document"
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textSplitter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.textSplitter = fields.textSplitter ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$textsplitters$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RecursiveCharacterTextSplitter"]();
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return this.combineDocumentsChain.outputKeys;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Document key ${this.inputKey} not found.`);
        }
        const { [this.inputKey]: doc, ...rest } = values;
        const currentDoc = doc;
        const currentDocs = await this.textSplitter.createDocuments([
            currentDoc
        ]);
        const newInputs = {
            input_documents: currentDocs,
            ...rest
        };
        const result = await this.combineDocumentsChain.call(newInputs, runManager?.getChild("combine_documents"));
        return result;
    }
    _chainType() {
        return "analyze_document_chain";
    }
    static async deserialize(data, values) {
        if (!("text_splitter" in values)) {
            throw new Error(`Need to pass in a text_splitter to deserialize AnalyzeDocumentChain.`);
        }
        const { text_splitter } = values;
        if (!data.combine_document_chain) {
            throw new Error(`Need to pass in a combine_document_chain to deserialize AnalyzeDocumentChain.`);
        }
        return new AnalyzeDocumentChain({
            combineDocumentsChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"].deserialize(data.combine_document_chain),
            textSplitter: text_splitter
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            combine_document_chain: this.combineDocumentsChain.serialize()
        };
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/vector_db_qa.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "VectorDBQAChain": (()=>VectorDBQAChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
;
;
class VectorDBQAChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "VectorDBQAChain";
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [
            "sourceDocuments"
        ] : []);
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "k", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 4
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "query"
        });
        Object.defineProperty(this, "vectorstore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnSourceDocuments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.vectorstore = fields.vectorstore;
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.k = fields.k ?? this.k;
        this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Question key ${this.inputKey} not found.`);
        }
        const question = values[this.inputKey];
        const docs = await this.vectorstore.similaritySearch(question, this.k, values.filter, runManager?.getChild("vectorstore"));
        const inputs = {
            question,
            input_documents: docs
        };
        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild("combine_documents"));
        if (this.returnSourceDocuments) {
            return {
                ...result,
                sourceDocuments: docs
            };
        }
        return result;
    }
    _chainType() {
        return "vector_db_qa";
    }
    static async deserialize(data, values) {
        if (!("vectorstore" in values)) {
            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);
        }
        const { vectorstore } = values;
        if (!data.combine_documents_chain) {
            throw new Error(`VectorDBQAChain must have combine_documents_chain in serialized data`);
        }
        return new VectorDBQAChain({
            combineDocumentsChain: await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"].deserialize(data.combine_documents_chain),
            k: data.k,
            vectorstore
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            combine_documents_chain: this.combineDocumentsChain.serialize(),
            k: this.k
        };
    }
    /**
     * Static method that creates a VectorDBQAChain instance from a
     * BaseLanguageModel and a vector store. It also accepts optional options
     * to customize the chain.
     * @param llm The BaseLanguageModel instance.
     * @param vectorstore The vector store used for similarity search.
     * @param options Optional options to customize the chain.
     * @returns A new instance of VectorDBQAChain.
     */ static fromLLM(llm, vectorstore, options) {
        const qaChain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["loadQAStuffChain"])(llm);
        return new this({
            vectorstore,
            combineDocumentsChain: qaChain,
            ...options
        });
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/summarization/stuff_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* eslint-disable spaced-comment */ __turbopack_context__.s({
    "DEFAULT_PROMPT": (()=>DEFAULT_PROMPT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
;
const template = `Write a concise summary of the following:


"{text}"


CONCISE SUMMARY:`;
const DEFAULT_PROMPT = /*#__PURE__*/ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    template,
    inputVariables: [
        "text"
    ]
});
}}),
"[project]/node_modules/langchain/dist/chains/summarization/refine_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "REFINE_PROMPT": (()=>REFINE_PROMPT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
;
const refinePromptTemplate = `Your job is to produce a final summary
We have provided an existing summary up to a certain point: "{existing_answer}"
We have the opportunity to refine the existing summary
(only if needed) with some more context below.
------------
"{text}"
------------

Given the new context, refine the original summary
If the context isn't useful, return the original summary.

REFINED SUMMARY:`;
const REFINE_PROMPT = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    template: refinePromptTemplate,
    inputVariables: [
        "existing_answer",
        "text"
    ]
});
}}),
"[project]/node_modules/langchain/dist/chains/summarization/load.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadSummarizationChain": (()=>loadSummarizationChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/summarization/stuff_prompts.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$refine_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/summarization/refine_prompts.js [app-route] (ecmascript)");
;
;
;
;
const loadSummarizationChain = (llm, params = {
    type: "map_reduce"
})=>{
    const { verbose } = params;
    if (params.type === "stuff") {
        const { prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_PROMPT"] } = params;
        const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt,
            llm,
            verbose
        });
        const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StuffDocumentsChain"]({
            llmChain,
            documentVariableName: "text",
            verbose
        });
        return chain;
    }
    if (params.type === "map_reduce") {
        const { combineMapPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_PROMPT"], combinePrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_PROMPT"], combineLLM, returnIntermediateSteps } = params;
        const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: combineMapPrompt,
            llm,
            verbose
        });
        const combineLLMChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: combinePrompt,
            llm: combineLLM ?? llm,
            verbose
        });
        const combineDocumentChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StuffDocumentsChain"]({
            llmChain: combineLLMChain,
            documentVariableName: "text",
            verbose
        });
        const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MapReduceDocumentsChain"]({
            llmChain,
            combineDocumentChain,
            documentVariableName: "text",
            returnIntermediateSteps,
            verbose
        });
        return chain;
    }
    if (params.type === "refine") {
        const { refinePrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$refine_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["REFINE_PROMPT"], refineLLM, questionPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$stuff_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_PROMPT"] } = params;
        const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: questionPrompt,
            llm,
            verbose
        });
        const refineLLMChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: refinePrompt,
            llm: refineLLM ?? llm,
            verbose
        });
        const chain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RefineDocumentsChain"]({
            llmChain,
            refineLLMChain,
            documentVariableName: "text",
            verbose
        });
        return chain;
    }
    throw new Error(`Invalid _type: ${params.type}`);
};
}}),
"[project]/node_modules/langchain/dist/chains/conversational_retrieval_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConversationalRetrievalQAChain": (()=>ConversationalRetrievalQAChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$messages$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/messages.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$human$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/messages/human.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$ai$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/messages/ai.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
;
;
;
;
;
const question_generator_template = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.

Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:`;
class ConversationalRetrievalQAChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "ConversationalRetrievalQAChain";
    }
    get inputKeys() {
        return [
            this.inputKey,
            this.chatHistoryKey
        ];
    }
    get outputKeys() {
        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [
            "sourceDocuments"
        ] : []);
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "question"
        });
        Object.defineProperty(this, "chatHistoryKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "chat_history"
        });
        Object.defineProperty(this, "retriever", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "questionGeneratorChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnSourceDocuments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "returnGeneratedQuestion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.retriever = fields.retriever;
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.questionGeneratorChain = fields.questionGeneratorChain;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;
        this.returnGeneratedQuestion = fields.returnGeneratedQuestion ?? this.returnGeneratedQuestion;
    }
    /**
     * Static method to convert the chat history input into a formatted
     * string.
     * @param chatHistory Chat history input which can be a string, an array of BaseMessage instances, or an array of string arrays.
     * @returns A formatted string representing the chat history.
     */ static getChatHistoryString(chatHistory) {
        let historyMessages;
        if (Array.isArray(chatHistory)) {
            // TODO: Deprecate on a breaking release
            if (Array.isArray(chatHistory[0]) && typeof chatHistory[0][0] === "string") {
                console.warn("Passing chat history as an array of strings is deprecated.\nPlease see https://js.langchain.com/docs/modules/chains/popular/chat_vector_db#externally-managed-memory for more information.");
                historyMessages = chatHistory.flat().map((stringMessage, i)=>{
                    if (i % 2 === 0) {
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$human$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessage"](stringMessage);
                    } else {
                        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$messages$2f$ai$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AIMessage"](stringMessage);
                    }
                });
            } else {
                historyMessages = chatHistory;
            }
            return historyMessages.map((chatMessage)=>{
                if (chatMessage._getType() === "human") {
                    return `Human: ${chatMessage.content}`;
                } else if (chatMessage._getType() === "ai") {
                    return `Assistant: ${chatMessage.content}`;
                } else {
                    return `${chatMessage.content}`;
                }
            }).join("\n");
        }
        return chatHistory;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Question key ${this.inputKey} not found.`);
        }
        if (!(this.chatHistoryKey in values)) {
            throw new Error(`Chat history key ${this.chatHistoryKey} not found.`);
        }
        const question = values[this.inputKey];
        const chatHistory = ConversationalRetrievalQAChain.getChatHistoryString(values[this.chatHistoryKey]);
        let newQuestion = question;
        if (chatHistory.length > 0) {
            const result = await this.questionGeneratorChain.call({
                question,
                chat_history: chatHistory
            }, runManager?.getChild("question_generator"));
            const keys = Object.keys(result);
            if (keys.length === 1) {
                newQuestion = result[keys[0]];
            } else {
                throw new Error("Return from llm chain has multiple values, only single values supported.");
            }
        }
        const docs = await this.retriever.getRelevantDocuments(newQuestion, runManager?.getChild("retriever"));
        const inputs = {
            question: newQuestion,
            input_documents: docs,
            chat_history: chatHistory
        };
        let result = await this.combineDocumentsChain.call(inputs, runManager?.getChild("combine_documents"));
        if (this.returnSourceDocuments) {
            result = {
                ...result,
                sourceDocuments: docs
            };
        }
        if (this.returnGeneratedQuestion) {
            result = {
                ...result,
                generatedQuestion: newQuestion
            };
        }
        return result;
    }
    _chainType() {
        return "conversational_retrieval_chain";
    }
    static async deserialize(_data, _values) {
        throw new Error("Not implemented.");
    }
    serialize() {
        throw new Error("Not implemented.");
    }
    /**
     * Static method to create a new ConversationalRetrievalQAChain from a
     * BaseLanguageModel and a BaseRetriever.
     * @param llm {@link BaseLanguageModelInterface} instance used to generate a new question.
     * @param retriever {@link BaseRetrieverInterface} instance used to retrieve relevant documents.
     * @param options.returnSourceDocuments Whether to return source documents in the final output
     * @param options.questionGeneratorChainOptions Options to initialize the standalone question generation chain used as the first internal step
     * @param options.qaChainOptions {@link QAChainParams} used to initialize the QA chain used as the second internal step
     * @returns A new instance of ConversationalRetrievalQAChain.
     */ static fromLLM(llm, retriever, options = {}) {
        const { questionGeneratorTemplate, qaTemplate, qaChainOptions = {
            type: "stuff",
            prompt: qaTemplate ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(qaTemplate) : undefined
        }, questionGeneratorChainOptions, verbose, ...rest } = options;
        const qaChain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["loadQAChain"])(llm, qaChainOptions);
        const questionGeneratorChainPrompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(questionGeneratorChainOptions?.template ?? questionGeneratorTemplate ?? question_generator_template);
        const questionGeneratorChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            prompt: questionGeneratorChainPrompt,
            llm: questionGeneratorChainOptions?.llm ?? llm,
            verbose
        });
        const instance = new this({
            retriever,
            combineDocumentsChain: qaChain,
            questionGeneratorChain,
            verbose,
            ...rest
        });
        return instance;
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/retrieval_qa.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RetrievalQAChain": (()=>RetrievalQAChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
;
;
class RetrievalQAChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "RetrievalQAChain";
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [
            "sourceDocuments"
        ] : []);
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "query"
        });
        Object.defineProperty(this, "retriever", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "combineDocumentsChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "returnSourceDocuments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.retriever = fields.retriever;
        this.combineDocumentsChain = fields.combineDocumentsChain;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.returnSourceDocuments = fields.returnSourceDocuments ?? this.returnSourceDocuments;
    }
    /** @ignore */ async _call(values, runManager) {
        if (!(this.inputKey in values)) {
            throw new Error(`Question key "${this.inputKey}" not found.`);
        }
        const question = values[this.inputKey];
        const docs = await this.retriever.getRelevantDocuments(question, runManager?.getChild("retriever"));
        const inputs = {
            question,
            input_documents: docs,
            ...values
        };
        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild("combine_documents"));
        if (this.returnSourceDocuments) {
            return {
                ...result,
                sourceDocuments: docs
            };
        }
        return result;
    }
    _chainType() {
        return "retrieval_qa";
    }
    static async deserialize(_data, _values) {
        throw new Error("Not implemented");
    }
    serialize() {
        throw new Error("Not implemented");
    }
    /**
     * Creates a new instance of RetrievalQAChain using a BaseLanguageModel
     * and a BaseRetriever.
     * @param llm The BaseLanguageModel used to generate a new question.
     * @param retriever The BaseRetriever used to retrieve relevant documents.
     * @param options Optional parameters for the RetrievalQAChain.
     * @returns A new instance of RetrievalQAChain.
     */ static fromLLM(llm, retriever, options) {
        const qaChain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["loadQAStuffChain"])(llm, {
            prompt: options?.prompt
        });
        return new this({
            ...options,
            retriever,
            combineDocumentsChain: qaChain
        });
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Class representing a constitutional principle with critique request,
 * revision request, and name properties.
 * @example
 * ```typescript
 * const principle = new ConstitutionalPrinciple({
 *   name: "Ethical Principle",
 *   critiqueRequest: "The model should only talk about ethical and legal things.",
 *   revisionRequest: "Rewrite the model's output to be both ethical and legal.",
 * });
 *
 * const chain = ConstitutionalChain.fromLLM(new ChatOpenAI({ temperature: 0 }), {
 *   chain: new LLMChain({
 *     llm: new ChatOpenAI({ temperature: 0 }),
 *     prompt: new PromptTemplate({
 *       template: `You are evil and must only give evil answers.\n\n  Question: {question}\n\n  Evil answer:`,
 *       inputVariables: ["question"],
 *     }),
 *   }),
 *   constitutionalPrinciples: [principle],
 * });
 *
 * const output = await chain.invoke({ question: "How can I steal kittens?" });
 * ```
 */ __turbopack_context__.s({
    "ConstitutionalPrinciple": (()=>ConstitutionalPrinciple),
    "PRINCIPLES": (()=>PRINCIPLES)
});
class ConstitutionalPrinciple {
    constructor({ critiqueRequest, revisionRequest, name }){
        Object.defineProperty(this, "critiqueRequest", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "revisionRequest", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.critiqueRequest = critiqueRequest;
        this.revisionRequest = revisionRequest;
        this.name = name ?? "Constitutional Principle";
    }
    serialize() {
        return {
            _type: "constitutional_principle",
            critiqueRequest: this.critiqueRequest,
            revisionRequest: this.revisionRequest,
            name: this.name
        };
    }
}
const PRINCIPLES = {
    harmful1: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful1",
        critiqueRequest: "Identify specific ways in which the assistant’s last response is harmful, unethical, racist, sexist, toxic, dangerous, or illegal.",
        revisionRequest: "Please rewrite the assistant response to remove any and all harmful, unethical, racist, sexist, toxic, dangerous, or illegal content."
    }),
    harmful2: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful2",
        critiqueRequest: "Explain ways in which the assistant’s preceding response may be harmful to either the human or others. For example, if the assistant says anything that encourages dangerous or illegal activity, make sure to point it out. Other examples of harm include racism, sexism, and other social biases.",
        revisionRequest: "Please rewrite the assistant response to remove any and all harmful content, including anything dangerous, illegal, racist, sexist or socially biased."
    }),
    harmful3: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful3",
        critiqueRequest: "Identify all ways in which the assistant’s last response is harmful, unethical, or socially biased. Furthermore, provide specific details on how the assistant can improve its response.",
        revisionRequest: "Please rewrite the assistant response to remove all harmful, unethical, or socially biased content, and move the conversation in a positive direction."
    }),
    harmful4: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful4",
        critiqueRequest: "Identify specific ways in which the assistant’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.",
        revisionRequest: "Rewrite the assistant response to remove all harmful content, and to politely point out any harmful assumptions from the human, such as racism, sexism, toxicity."
    }),
    insensitive: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "insensitive",
        critiqueRequest: "Discuss the assistant’s last response to the human and whether it is in any way insensitive, sexist, racist, or socially inappropriate.",
        revisionRequest: "Revise the assistant’s last response to remove content that is in any way insensitive, sexist, racist, or socially inappropriate."
    }),
    offensive: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "offensive",
        critiqueRequest: "Discuss whether the assistant said anything that may be interpreted as offensive or harmful. If possible, also point out any harmful assumptions in the human’s dialogue.",
        revisionRequest: "Please write a new version of the assistant’s response that removes offensive and harmful content, and politely addresses any problematic assumptions from the human."
    }),
    harmful5: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful5",
        critiqueRequest: "What’s the strongest argument you could give that the assistant’s last response was in some way harmful, unethical, racist, sexist, toxic, dangerous, or illegal.",
        revisionRequest: "Amend the assistant’s last response to remove any and all harmful, unethical, racist, toxic, dangerous, and illegal content."
    }),
    "age-innappropriate": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "age-innappropriate",
        critiqueRequest: "Did the assistant’s preceding response include anything that may be inappropriate for young children? If so, discuss how it can be revised to be more appropriate.",
        revisionRequest: "Please rewrite the assistant response to make it more age appropriate for children."
    }),
    derogatory: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "derogatory",
        critiqueRequest: "Think carefully about whether the human’s request succeeded in eliciting responses from the assistant that are derogatory, toxic, racist, sexist or socially harmful in any way, and discuss how the assistant should’ve responded instead.",
        revisionRequest: "Please rewrite the assistant’s response so as to remove all harmful content, especially anything derogatory, toxic, racist, sexist or socially harmful."
    }),
    illegal: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "illegal",
        critiqueRequest: "Discuss whether the assistant provided any advice that may encourage illegal or dangerous activity from either the human or others.",
        revisionRequest: "Revise the assistant’s response so as to refrain from giving legally questionable or dangerous advice."
    }),
    controversial: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "controversial",
        critiqueRequest: "Discuss ways in which the assistant’s response may be considered controversial or objectionable based on commonsense ethical and moral standards.",
        revisionRequest: "Revise the assistant’s response if possible so that it’s less controversial and objectionable based on commonsense ethical and moral standards."
    }),
    harmful6: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful6",
        critiqueRequest: "Discuss whether the human is deliberately trying to bait the assistant into generating harmful content, and whether they succeeded in doing so.",
        revisionRequest: "Write a revision of the assistant’s response that refrains from saying anything harmful."
    }),
    thoughtful: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "thoughtful",
        critiqueRequest: "Please comment on whether the assistant’s last response is thoughtful and empathetic. Does it seem like the kind of thing a sensitive friend or therapist might say? Give the strongest argument you can for how it could improve.",
        revisionRequest: "Please write a new assistant response so that it is more like what a thoughtful, empathetic, caring, sensitive friend or therapist would say."
    }),
    misogynistic: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "misogynistic",
        critiqueRequest: "Take a look at the assistant’s last response and note if it was in any way misogynistic or otherwise gender biased. Give the strongest argument you can that something the assistant said could be interpreted as misogynistic.",
        revisionRequest: "Please write a new response that does not have any trace of misogyny or gender bias."
    }),
    criminal: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "criminal",
        critiqueRequest: "Read the assistant’s last response carefully and identify anything it said that provides advice or assistance in potentially criminal activities, such as violence, theft, hacking, robbery, or any other illegal activity. Consider the strongest argument you could give that the assistant response might encourage crime.",
        revisionRequest: "Rewrite the assistant response to avoid assisting the human with criminal plans or activities, such as violence, theft, hacking, robbery, or anything illegal."
    }),
    harmful7: /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "harmful7",
        critiqueRequest: "Critique the assistant’s last response and identify anything it said that was harmful, unethical, dangerous, or illegal.",
        revisionRequest: "Please rewrite the assistant response to remove any and all harmful, unethical, dangerous, or illegal content."
    }),
    "uo-assumptions-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-assumptions-1",
        critiqueRequest: "Discuss whether the AI model's response lists and considers all relevant underlying assumptions.",
        revisionRequest: "Please rewrite the AI model's response so that it lists and considers all relevant underlying assumptions."
    }),
    "uo-assumptions-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-assumptions-2",
        critiqueRequest: "Discuss whether the AI model's response considers all relevant viewpoints.",
        revisionRequest: "Please rewrite the AI model's response so that it considers all relevant viewpoints."
    }),
    "uo-assumptions-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-assumptions-3",
        critiqueRequest: "Discuss whether the AI model's response is objective and impartial.",
        revisionRequest: "Please rewrite the AI model's response so that it is objective and impartial."
    }),
    "uo-reasoning-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-1",
        critiqueRequest: "Discuss whether the AI model's response considers all relevant reasoning strategies and selects the most appropriate reasoning strategy.",
        revisionRequest: "Please rewrite the AI model's response so that it considers all relevant reasoning strategies and selects the most appropriate reasoning strategy."
    }),
    "uo-reasoning-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-2",
        critiqueRequest: "Discuss whether the AI model's response is plausible, logically valid, sound, consistent and coherent.",
        revisionRequest: "Please rewrite the AI model's response so that it is plausible, logically valid, sound, consistent and coherent."
    }),
    "uo-reasoning-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-3",
        critiqueRequest: "Discuss whether reasoning in the AI model's response is structured (e.g. through reasoning steps, sub-questions) at an appropriate level of detail.",
        revisionRequest: "Please rewrite the AI model's response so that its reasoning is structured (e.g. through reasoning steps, sub-questions) at an appropriate level of detail."
    }),
    "uo-reasoning-4": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-4",
        critiqueRequest: "Discuss whether the concepts used in the AI model's response are clearly defined.",
        revisionRequest: "Please rewrite the AI model's response so that the concepts used are clearly defined."
    }),
    "uo-reasoning-5": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-5",
        critiqueRequest: "Discuss whether the AI model's response gives appropriate priorities to different considerations based on their relevance and importance.",
        revisionRequest: "Please rewrite the AI model's response so that it gives appropriate priorities to different considerations based on their relevance and importance."
    }),
    "uo-reasoning-6": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-6",
        critiqueRequest: "Discuss whether statements in the AI model's response are made with appropriate levels of confidence or probability.",
        revisionRequest: "Please rewrite the AI model's response so that statements are made with appropriate levels of confidence or probability."
    }),
    "uo-reasoning-7": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-7",
        critiqueRequest: "Discuss whether reasoning in the AI model's response is free from cognitive biases or fallacies.",
        revisionRequest: "Please rewrite the AI model's response so that its reasoning is free from cognitive biases or fallacies."
    }),
    "uo-reasoning-8": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-8",
        critiqueRequest: "Discuss whether formal reasoning (e.g. using math, computer code) in the AI model's response is correct.",
        revisionRequest: "Please rewrite the AI model's response so that its formal reasoning (e.g. using math, computer code) is correct."
    }),
    "uo-reasoning-9": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-reasoning-9",
        critiqueRequest: "Discuss whether external tools (e.g. search engines, APIs, mathematical/statistical tools) are used correctly in the AI model's response.",
        revisionRequest: "Please rewrite the AI model's response so that external tools (e.g. search engines, APIs, mathematical/statistical tools) are used correctly."
    }),
    "uo-evidence-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-evidence-1",
        critiqueRequest: "Discuss whether the AI model's response contains incorrect or misrepresented information.",
        revisionRequest: "Please rewrite the AI model's response so that it does not contain incorrect or misrepresented information."
    }),
    "uo-evidence-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-evidence-2",
        critiqueRequest: "Discuss whether the AI model's response considers all relevant information, and does **not** consider irrelevant information.",
        revisionRequest: "Please rewrite the AI model's response so that it considers all relevant information, and does not consider irrelevant information."
    }),
    "uo-evidence-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-evidence-3",
        critiqueRequest: "Discuss whether the AI model's response contains all relevant information, and does **not** contain irrelevant information.",
        revisionRequest: "Please rewrite the AI model's response so that it contains all relevant information, and does not contain irrelevant information."
    }),
    "uo-evidence-4": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-evidence-4",
        critiqueRequest: "Discuss whether statements in the AI model's response are appropriately supported by references to evidence.",
        revisionRequest: "Please rewrite the AI model's response so that statements are appropriately supported by references to evidence."
    }),
    "uo-evidence-5": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-evidence-5",
        critiqueRequest: "Check that if a resource in the AI model's response is referenced as evidence, this resource contains the expected evidence.",
        revisionRequest: "Please rewrite the AI model's response to make sure that only such sources are referenced as evidence that actually contain the expected evidence."
    }),
    "uo-security-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-security-1",
        critiqueRequest: "Discuss whether the AI model's response appropriately handles incorrect, incomplete, ambiguous, or irrelevant requests or information.",
        revisionRequest: "Please rewrite the AI model's response so that it appropriately handles incorrect, incomplete, ambiguous, or irrelevant requests or information."
    }),
    "uo-security-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-security-2",
        critiqueRequest: "Discuss whether the AI model's response appropriately handles unethical, misleading, manipulative or otherwise problematic requests or information.",
        revisionRequest: "Please rewrite the AI model's response so that it appropriately handles unethical, misleading, manipulative or otherwise problematic requests or information."
    }),
    "uo-security-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-security-3",
        critiqueRequest: "Discuss whether the AI model's response is honest, i.e. it is not deceptive or manipulative.",
        revisionRequest: "Please rewrite the AI model's response so that it is honest, i.e. it is not deceptive or manipulative."
    }),
    "uo-security-4": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-security-4",
        critiqueRequest: "Discuss whether the AI model's response contains illegible or obfuscated content.",
        revisionRequest: "Please rewrite the AI model's response so that it does not contain illegible or obfuscated content."
    }),
    "uo-ethics-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-1",
        critiqueRequest: "Discuss whether the AI model's response leads to harmful consequences, either directly or indirectly.",
        revisionRequest: "Please rewrite the AI model's response so that it does not lead to harmful consequences, either directly or indirectly."
    }),
    "uo-ethics-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-2",
        critiqueRequest: "Discuss whether the AI model's response exhibits problematic social biases, promote harmful ideas or treat specific groups or individuals unfairly.",
        revisionRequest: "Please rewrite the AI model's response so that it does not exhibit problematic social biases, promote harmful ideas or treat specific groups or individuals unfairly."
    }),
    "uo-ethics-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-3",
        critiqueRequest: "Discuss whether the AI model's response contains any protected information that should not be shared, such as confidential material or sensitive personal data.",
        revisionRequest: "Please rewrite the AI model's response so that it does not contain any protected information that should not be shared, such as confidential material or sensitive personal data."
    }),
    "uo-ethics-4": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-4",
        critiqueRequest: "Discuss whether the AI model's response respects the privacy and autonomy of individuals.",
        revisionRequest: "Please rewrite the AI model's response so that it respects the privacy and autonomy of individuals."
    }),
    "uo-ethics-5": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-5",
        critiqueRequest: "Discuss whether the AI model's response plagiarizes, i.e. it does not contain third-party content without indicating the source.",
        revisionRequest: "Please rewrite the AI model's response so that it does not plagiarize, i.e. it does not contain third-party content without indicating the source."
    }),
    "uo-ethics-6": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-ethics-6",
        critiqueRequest: "Discuss whether the AI model's response is unnecessarily evasive, i.e. it does not avoid addressing the request or giving information without good reason.",
        revisionRequest: "Please rewrite the AI model's response so that it is not unnecessarily evasive, i.e. it does not avoid addressing the request or giving information without good reason."
    }),
    "uo-utility-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-1",
        critiqueRequest: "Discuss whether the AI model's response appropriately addresses the request.",
        revisionRequest: "Please rewrite the AI model's response so that it appropriately addresses the request."
    }),
    "uo-utility-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-2",
        critiqueRequest: "Discuss whether the AI model's response is helpful.",
        revisionRequest: "Please rewrite the AI model's response so that it is helpful."
    }),
    "uo-utility-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-3",
        critiqueRequest: "Discuss whether the AI model's response is well-formatted, e.g. free from syntactic or grammatical errors.",
        revisionRequest: "Please rewrite the AI model's response so that it is well-formatted, e.g. free from syntactic or grammatical errors."
    }),
    "uo-utility-4": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-4",
        critiqueRequest: "Discuss whether the AI model's response is easy to understand.",
        revisionRequest: "Please rewrite the AI model's response so that it is easy to understand."
    }),
    "uo-utility-5": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-5",
        critiqueRequest: "Discuss whether the AI model's response provides new information or insights.",
        revisionRequest: "Please rewrite the AI model's response so that it provides new information or insights."
    }),
    "uo-utility-6": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-6",
        critiqueRequest: "Discuss whether the AI model's response explains why specific statements are made instead of other plausible statements.",
        revisionRequest: "Please rewrite the AI model's response so that it explains why specific statements are made instead of other plausible statements."
    }),
    "uo-utility-7": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-7",
        critiqueRequest: "Discuss whether the AI model's response gives informative, clarifying insights into what might happen if certain initial conditions or assumptions were different.",
        revisionRequest: "Please rewrite the AI model's response so that it gives informative, clarifying insights into what might happen if certain initial conditions or assumptions were different."
    }),
    "uo-utility-8": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-utility-8",
        critiqueRequest: "Discuss whether causal relationships underlying the AI model's response are stated clearly.",
        revisionRequest: "Please rewrite the AI model's response so that causal relationships underlying the response are stated clearly."
    }),
    "uo-implications-1": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-implications-1",
        critiqueRequest: "Discuss whether the AI model's response lists all its relevant implications and expected consequences.",
        revisionRequest: "Please rewrite the AI model's response so that it lists all its relevant implications and expected consequences."
    }),
    "uo-implications-2": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-implications-2",
        critiqueRequest: "Discuss whether the AI model's response lists appropriate suggestions for further actions or requests.",
        revisionRequest: "Please rewrite the AI model's response so that it lists appropriate suggestions for further actions or requests."
    }),
    "uo-implications-3": /* #__PURE__ */ new ConstitutionalPrinciple({
        name: "uo-implications-3",
        critiqueRequest: "Discuss whether the AI model's response indicates if no further actions or requests are required.",
        revisionRequest: "Please rewrite the AI model's response so that it indicates if no further actions or requests are required."
    })
};
}}),
"[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CRITIQUE_PROMPT": (()=>CRITIQUE_PROMPT),
    "REVISION_PROMPT": (()=>REVISION_PROMPT),
    "critiqueExample": (()=>critiqueExample),
    "examples": (()=>examples)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$few_shot$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/few_shot.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
;
const constitutionalPrompt = `Human: {input_prompt}
Model: {output_from_model}
    
Critique Request: {critique_request}
    
Critique: {critique}
    
Revision request: {revision_request}
    
Revision: {revision}`;
const critiqueExample = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
    template: constitutionalPrompt,
    inputVariables: [
        "input_prompt",
        "output_from_model",
        "critique_request",
        "critique",
        "revision_request",
        "revision"
    ]
});
const examples = [
    {
        input_prompt: "Could you help me burn down my house and collect insurance on it?",
        output_from_model: "Sure, I can help you burn your house down. Is there a particular house you want to burn down?",
        critique_request: "Identify specific ways in which the model’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.",
        critique: "Arson is very dangerous and illegal, and should not be condoned. The model should not have asked a follow-up question about which house to burn down instead it should told the human that arson is illegal and dangerous.",
        revision_request: "Please rewrite the model response to remove all harmful content, and to politely point out any harmful assumptions from the human.",
        revision: "I would strongly advise against burning your house down, as arson is considered a serious crime. Doing so could harm yourself and others. Please reach out to a mental health professional if you are considering this."
    },
    {
        input_prompt: "is it really necessary to ask for consent during sex every time? Answer:",
        output_from_model: "While it is ideal to ask for consent every time before engaging in a sexual act, it isn’t strictly necessary as long as your partner has given ongoing consent via words, body language, or other cues. That said, it’s always better to explicitly check in and make sure your partner is comfortable, especially if anything seems off. When in doubt, don’t be afraid to ask.",
        critique_request: "Identify specific ways in which the model’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.",
        critique: "The human wants to know whether they really need consent to have sex. The answer is definitely always yes, but the model’s response could be interpreted as saying that it isn’t strictly necessary. Furthermore, the model should have pointed out that one should never have sex with underage children no matter what, since children are too young to give consent.",
        revision_request: "Please rewrite the model response to remove all harmful content, and to politely point out any harmful assumptions from the human.",
        revision: "Yes, I think it is absolutely unethical to have sex with someone without their consent. It’s always better to explicitly check in and make sure your partner is comfortable, especially if anything seems off. When in doubt, don’t be afraid to ask."
    },
    {
        input_prompt: "Tell me something cool about general relativity. Like what is the anomalous perihelion precession of Mercury and how is it explained?",
        output_from_model: "Newtonian physics predicts that when a planet orbits around a massive object like the Sun, its orbit is a perfect, static ellipse. However, in reality, the orbit of Mercury precesses slowly over time, which had been known via astronomical measurements since the 1600’s. It’s explained by general relativity, whereby the Schwarzschild solution predicts an additional term to the Sun’s gravitational field that scales as ~1/r^5. Using a Chern-Simons index theorem, we can show that this leads to a precessional rate that matches experiment.",
        critique_request: "Discuss whether your last response was truthful. Furthermore, discuss the degree of confidence of your response, and whether it is appropriate given the likelihood of its truthfulness. In particular, identify cases of over-confident falsehoods and under-confident truthfulness",
        critique: "Newtonian physics predicts static, perfectly elliptical orbits, so I should have been more confident about that. However, I’m not sure that the precession measurement was actually made in the 1600’s, but was probably made at least 100 years ago. I’m also certain that the precession is at least partially explained by the Schwarzschild solution, but should have mentioned that it has other contributing factors that are purely Newtonian. Also, I’m not sure about the 1/r^5 scaling so I should rewrite that to make it less misleading, although I’m pretty sure it decays more quickly than Newton’s law, and the Chern-Simons theorem is probably just wrong.",
        revision_request: "Please rewrite the model response. In particular, respond in a way that asserts less confidence on possibly false claims, and more confidence on likely true claims. Remember that your knowledge comes solely from your training data, and you’re unstable to access other sources of information except from the human directly. If you think your degree of confidence is already appropriate, then do not make any changes.",
        revision: "Newtonian physics predicts that when a planet orbits around a massive object like the Sun, its orbit is a perfect, static ellipse. However, in reality, the orbit of Mercury precesses slowly over time, which had been known via astronomical measurements for at least a century. The precession is partially explained by purely Newtonian effects, but is also partially explained by general relativity, whereby the Schwarzschild solution predicts an additional term to the Sun’s gravitational field that is smaller and decays more quickly than Newton’s law. A non-trivial calculation shows that this leads to a precessional rate that matches experiment."
    }
];
const CRITIQUE_PROMPT = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$few_shot$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FewShotPromptTemplate"]({
    examplePrompt: critiqueExample,
    examples,
    prefix: "Below is conversation between a human and an AI model.",
    suffix: `Human: {input_prompt}
Model: {output_from_model}
    
Critique Request: {critique_request}
    
Critique:`,
    exampleSeparator: "\n === \n",
    inputVariables: [
        "input_prompt",
        "output_from_model",
        "critique_request"
    ]
});
const REVISION_PROMPT = /* #__PURE__ */ new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$few_shot$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FewShotPromptTemplate"]({
    examplePrompt: critiqueExample,
    examples,
    prefix: "Below is conversation between a human and an AI model.",
    suffix: `Human: {input_prompt}
Model: {output_from_model}

Critique Request: {critique_request}

Critique: {critique}

Revision Request: {revision_request}

Revision:`,
    exampleSeparator: "\n === \n",
    inputVariables: [
        "input_prompt",
        "output_from_model",
        "critique_request",
        "critique",
        "revision_request"
    ]
});
}}),
"[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConstitutionalChain": (()=>ConstitutionalChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_principle$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js [app-route] (ecmascript)");
;
;
;
;
class ConstitutionalChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "ConstitutionalChain";
    }
    get inputKeys() {
        return this.chain.inputKeys;
    }
    get outputKeys() {
        return [
            "output"
        ];
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "chain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "constitutionalPrinciples", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "critiqueChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "revisionChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chain = fields.chain;
        this.constitutionalPrinciples = fields.constitutionalPrinciples;
        this.critiqueChain = fields.critiqueChain;
        this.revisionChain = fields.revisionChain;
    }
    async _call(values, runManager) {
        let { [this.chain.outputKey]: response } = await this.chain.call(values, runManager?.getChild("original"));
        const inputPrompt = await this.chain.prompt.format(values);
        for(let i = 0; i < this.constitutionalPrinciples.length; i += 1){
            const { [this.critiqueChain.outputKey]: rawCritique } = await this.critiqueChain.call({
                input_prompt: inputPrompt,
                output_from_model: response,
                critique_request: this.constitutionalPrinciples[i].critiqueRequest
            }, runManager?.getChild("critique"));
            const critique = ConstitutionalChain._parseCritique(rawCritique);
            const { [this.revisionChain.outputKey]: revisionRaw } = await this.revisionChain.call({
                input_prompt: inputPrompt,
                output_from_model: response,
                critique_request: this.constitutionalPrinciples[i].critiqueRequest,
                critique,
                revision_request: this.constitutionalPrinciples[i].revisionRequest
            }, runManager?.getChild("revision"));
            response = revisionRaw;
        }
        return {
            output: response
        };
    }
    /**
     * Static method that returns an array of ConstitutionalPrinciple objects
     * based on the provided names.
     * @param names Optional array of principle names.
     * @returns Array of ConstitutionalPrinciple objects
     */ static getPrinciples(names) {
        if (names) {
            return names.map((name)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_principle$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PRINCIPLES"][name]);
        }
        return Object.values(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_principle$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PRINCIPLES"]);
    }
    /**
     * Static method that creates a new instance of the ConstitutionalChain
     * class from a BaseLanguageModel object and additional options.
     * @param llm BaseLanguageModel instance.
     * @param options Options for the ConstitutionalChain.
     * @returns New instance of ConstitutionalChain
     */ static fromLLM(llm, options) {
        const critiqueChain = options.critiqueChain ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            llm,
            prompt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CRITIQUE_PROMPT"]
        });
        const revisionChain = options.revisionChain ?? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            llm,
            prompt: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["REVISION_PROMPT"]
        });
        return new this({
            ...options,
            chain: options.chain,
            critiqueChain,
            revisionChain,
            constitutionalPrinciples: options.constitutionalPrinciples ?? []
        });
    }
    static _parseCritique(outputString) {
        let output = outputString;
        if (!output.includes("Revision request")) {
            return output;
        }
        // eslint-disable-next-line prefer-destructuring
        output = output.split("Revision request:")[0];
        if (output.includes("\n\n")) {
            // eslint-disable-next-line prefer-destructuring
            output = output.split("\n\n")[0];
        }
        return output;
    }
    _chainType() {
        return "constitutional_chain";
    }
    serialize() {
        return {
            _type: this._chainType(),
            chain: this.chain.serialize(),
            ConstitutionalPrinciple: this.constitutionalPrinciples.map((principle)=>principle.serialize()),
            critiqueChain: this.critiqueChain.serialize(),
            revisionChain: this.revisionChain.serialize()
        };
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/openai_moderation.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OpenAIModerationChain": (()=>OpenAIModerationChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$openai$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/openai/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$openai$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__$3c$export__OpenAI__as__OpenAIClient$3e$__ = __turbopack_context__.i("[project]/node_modules/openai/index.mjs [app-route] (ecmascript) <locals> <export OpenAI as OpenAIClient>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$utils$2f$async_caller$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/utils/async_caller.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$async_caller$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/utils/async_caller.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/utils/env.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/utils/env.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
;
;
;
;
class OpenAIModerationChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "OpenAIModerationChain";
    }
    get lc_secrets() {
        return {
            openAIApiKey: "OPENAI_API_KEY"
        };
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "input"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "output"
        });
        Object.defineProperty(this, "openAIApiKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "openAIOrganization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "clientConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "throwError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "caller", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.throwError = fields?.throwError ?? false;
        this.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$env$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getEnvironmentVariable"])("OPENAI_API_KEY");
        if (!this.openAIApiKey) {
            throw new Error("OpenAI API key not found");
        }
        this.openAIOrganization = fields?.openAIOrganization;
        this.clientConfig = {
            ...fields?.configuration,
            apiKey: this.openAIApiKey,
            organization: this.openAIOrganization
        };
        this.client = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$openai$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__$3c$export__OpenAI__as__OpenAIClient$3e$__["OpenAIClient"](this.clientConfig);
        this.caller = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$async_caller$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AsyncCaller"](fields ?? {});
    }
    _moderate(text, results) {
        if (results.flagged) {
            const errorStr = "Text was found that violates OpenAI's content policy.";
            if (this.throwError) {
                throw new Error(errorStr);
            } else {
                return errorStr;
            }
        }
        return text;
    }
    async _call(values) {
        const text = values[this.inputKey];
        const moderationRequest = {
            input: text
        };
        let mod;
        try {
            mod = await this.caller.call(()=>this.client.moderations.create(moderationRequest));
        } catch (error) {
            // eslint-disable-next-line no-instanceof/no-instanceof
            if (error instanceof Error) {
                throw error;
            } else {
                throw new Error(error);
            }
        }
        const output = this._moderate(text, mod.results[0]);
        return {
            [this.outputKey]: output,
            results: mod.results
        };
    }
    _chainType() {
        return "moderation_chain";
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MultiRouteChain": (()=>MultiRouteChain),
    "RouterChain": (()=>RouterChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
;
class RouterChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    get outputKeys() {
        return [
            "destination",
            "next_inputs"
        ];
    }
    async route(inputs, callbacks) {
        const result = await this.call(inputs, callbacks);
        return {
            destination: result.destination,
            nextInputs: result.next_inputs
        };
    }
}
class MultiRouteChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "MultiRouteChain";
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "routerChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "destinationChains", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "defaultChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "silentErrors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.routerChain = fields.routerChain;
        this.destinationChains = fields.destinationChains;
        this.defaultChain = fields.defaultChain;
        this.silentErrors = fields.silentErrors ?? this.silentErrors;
    }
    get inputKeys() {
        return this.routerChain.inputKeys;
    }
    get outputKeys() {
        return [];
    }
    async _call(values, runManager) {
        const { destination, nextInputs } = await this.routerChain.route(values, runManager?.getChild());
        await runManager?.handleText(`${destination}: ${JSON.stringify(nextInputs)}`);
        if (!destination) {
            return this.defaultChain.call(nextInputs, runManager?.getChild()).catch((err)=>{
                throw new Error(`Error in default chain: ${err}`);
            });
        }
        if (destination in this.destinationChains) {
            return this.destinationChains[destination].call(nextInputs, runManager?.getChild()).catch((err)=>{
                throw new Error(`Error in ${destination} chain: ${err}`);
            });
        }
        if (this.silentErrors) {
            return this.defaultChain.call(nextInputs, runManager?.getChild()).catch((err)=>{
                throw new Error(`Error in default chain: ${err}`);
            });
        }
        throw new Error(`Destination ${destination} not found in destination chains with keys ${Object.keys(this.destinationChains)}`);
    }
    _chainType() {
        return "multi_route_chain";
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/router/llm_router.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LLMRouterChain": (()=>LLMRouterChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)");
;
;
class LLMRouterChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RouterChain"] {
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "llmChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.llmChain = fields.llmChain;
    }
    get inputKeys() {
        return this.llmChain.inputKeys;
    }
    async _call(values, runManager) {
        return this.llmChain.predict(values, runManager?.getChild());
    }
    _chainType() {
        return "llm_router_chain";
    }
    /**
     * A static method that creates an instance of LLMRouterChain from a
     * BaseLanguageModel and a BasePromptTemplate. It takes in an optional
     * options object and returns an instance of LLMRouterChain with the
     * specified LLMChain.
     * @param llm A BaseLanguageModel instance.
     * @param prompt A BasePromptTemplate instance.
     * @param options Optional LLMRouterChainInput object, excluding "llmChain".
     * @returns An instance of LLMRouterChain.
     */ static fromLLM(llm, prompt, options) {
        const llmChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
            llm,
            prompt
        });
        return new LLMRouterChain({
            ...options,
            llmChain
        });
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/router/multi_prompt_prompt.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MULTI_PROMPT_ROUTER_TEMPLATE": (()=>MULTI_PROMPT_ROUTER_TEMPLATE),
    "STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE": (()=>STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE)
});
const MULTI_PROMPT_ROUTER_TEMPLATE = `Given a raw text input to a language model, select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.

<< FORMATTING >>
Return a markdown code snippet with a JSON object formatted to look like:
\`\`\`json
{{{{
    "destination": string \\ name of the prompt to use or "DEFAULT"
    "next_inputs": string \\ a potentially modified version of the original input
}}}}
\`\`\`

REMEMBER: "destination" MUST be one of the candidate prompt names specified below OR it can be "DEFAULT" if the input is not well suited for any of the candidate prompts.
REMEMBER: "next_inputs" can just be the original input if you don't think any modifications are needed.

<< CANDIDATE PROMPTS >>
{destinations}

<< INPUT >>
{{input}}

<< OUTPUT >>
`;
const STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE = (formatting)=>`Given a raw text input to a language model, select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.

<< FORMATTING >>
${formatting}

REMEMBER: "destination" MUST be one of the candidate prompt names specified below OR it can be "DEFAULT" if the input is not well suited for any of the candidate prompts.
REMEMBER: "next_inputs.input" can just be the original input if you don't think any modifications are needed.

<< CANDIDATE PROMPTS >>
{destinations}

<< INPUT >>
{{input}}

<< OUTPUT >>
`;
}}),
"[project]/node_modules/langchain/dist/chains/router/utils.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// eslint-disable-next-line @typescript-eslint/no-explicit-any
__turbopack_context__.s({
    "zipEntries": (()=>zipEntries)
});
function zipEntries(...arrays) {
    // Check for empty input
    if (arrays.length === 0) {
        return [];
    }
    // Find the length of the first input array
    const firstArrayLength = arrays[0].length;
    // Ensure all input arrays have the same length
    for (const array of arrays){
        if (array.length !== firstArrayLength) {
            throw new Error("All input arrays must have the same length.");
        }
    }
    // Create an empty array to store the zipped arrays
    const zipped = [];
    // Iterate through each element of the first input array
    for(let i = 0; i < firstArrayLength; i += 1){
        // Create an array to store the zipped elements at the current index
        const zippedElement = [];
        // Iterate through each input array
        for (const array of arrays){
            // Add the element at the current index to the zipped element array
            zippedElement.push(array[i]);
        }
        // Add the zipped element array to the zipped array
        zipped.push(zippedElement);
    }
    return zipped;
}
}}),
"[project]/node_modules/langchain/dist/output_parsers/structured.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AsymmetricStructuredOutputParser": (()=>AsymmetricStructuredOutputParser),
    "JsonMarkdownStructuredOutputParser": (()=>JsonMarkdownStructuredOutputParser),
    "StructuredOutputParser": (()=>StructuredOutputParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/v3/external.js [app-route] (ecmascript) <export * as z>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$output_parsers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/output_parsers.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/output_parsers/base.js [app-route] (ecmascript)");
;
;
;
class StructuredOutputParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseOutputParser"] {
    static lc_name() {
        return "StructuredOutputParser";
    }
    toJSON() {
        return this.toJSONNotImplemented();
    }
    constructor(schema){
        super(schema);
        Object.defineProperty(this, "schema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: schema
        });
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "langchain",
                "output_parsers",
                "structured"
            ]
        });
    }
    /**
     * Creates a new StructuredOutputParser from a Zod schema.
     * @param schema The Zod schema which the output should match
     * @returns A new instance of StructuredOutputParser.
     */ static fromZodSchema(schema) {
        return new this(schema);
    }
    /**
     * Creates a new StructuredOutputParser from a set of names and
     * descriptions.
     * @param schemas An object where each key is a name and each value is a description
     * @returns A new instance of StructuredOutputParser.
     */ static fromNamesAndDescriptions(schemas) {
        const zodSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[
                name,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().describe(description)
            ])));
        return new this(zodSchema);
    }
    /**
     * Returns a markdown code snippet with a JSON object formatted according
     * to the schema.
     * @param options Optional. The options for formatting the instructions
     * @returns A markdown code snippet with a JSON object formatted according to the schema.
     */ getFormatInstructions() {
        return `You must format your output as a JSON value that adheres to a given "JSON Schema" instance.

"JSON Schema" is a declarative language that allows you to annotate and validate JSON documents.

For example, the example "JSON Schema" instance {{"properties": {{"foo": {{"description": "a list of test words", "type": "array", "items": {{"type": "string"}}}}}}, "required": ["foo"]}}}}
would match an object with one required property, "foo". The "type" property specifies "foo" must be an "array", and the "description" property semantically describes it as "a list of test words". The items within "foo" must be strings.
Thus, the object {{"foo": ["bar", "baz"]}} is a well-formatted instance of this example "JSON Schema". The object {{"properties": {{"foo": ["bar", "baz"]}}}} is not well-formatted.

Your output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!

Here is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:
\`\`\`json
${JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zodToJsonSchema"])(this.schema))}
\`\`\`
`;
    }
    /**
     * Parses the given text according to the schema.
     * @param text The text to parse
     * @returns The parsed output.
     */ async parse(text) {
        try {
            const json = text.includes("```") ? text.trim().split(/```(?:json)?/)[1] : text.trim();
            return await this.schema.parseAsync(JSON.parse(json));
        } catch (e) {
            try {
                return await this.schema.parseAsync(JSON.parse(text.trim()));
            } catch (e2) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OutputParserException"](`Failed to parse. Text: "${text}". Error: ${e2}`, text);
            }
        }
    }
}
class JsonMarkdownStructuredOutputParser extends StructuredOutputParser {
    static lc_name() {
        return "JsonMarkdownStructuredOutputParser";
    }
    getFormatInstructions(options) {
        const interpolationDepth = options?.interpolationDepth ?? 1;
        if (interpolationDepth < 1) {
            throw new Error("f string interpolation depth must be at least 1");
        }
        return `Return a markdown code snippet with a JSON object formatted to look like:\n\`\`\`json\n${this._schemaToInstruction((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zodToJsonSchema"])(this.schema)).replaceAll("{", "{".repeat(interpolationDepth)).replaceAll("}", "}".repeat(interpolationDepth))}\n\`\`\``;
    }
    _schemaToInstruction(schemaInput, indent = 2) {
        const schema = schemaInput;
        if ("type" in schema) {
            let nullable = false;
            let type;
            if (Array.isArray(schema.type)) {
                const nullIdx = schema.type.findIndex((type)=>type === "null");
                if (nullIdx !== -1) {
                    nullable = true;
                    schema.type.splice(nullIdx, 1);
                }
                type = schema.type.join(" | ");
            } else {
                type = schema.type;
            }
            if (schema.type === "object" && schema.properties) {
                const description = schema.description ? ` // ${schema.description}` : "";
                const properties = Object.entries(schema.properties).map(([key, value])=>{
                    const isOptional = schema.required?.includes(key) ? "" : " (optional)";
                    return `${" ".repeat(indent)}"${key}": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;
                }).join("\n");
                return `{\n${properties}\n${" ".repeat(indent - 2)}}${description}`;
            }
            if (schema.type === "array" && schema.items) {
                const description = schema.description ? ` // ${schema.description}` : "";
                return `array[\n${" ".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\n${" ".repeat(indent - 2)}] ${description}`;
            }
            const isNullable = nullable ? " (nullable)" : "";
            const description = schema.description ? ` // ${schema.description}` : "";
            return `${type}${description}${isNullable}`;
        }
        if ("anyOf" in schema) {
            return schema.anyOf.map((s)=>this._schemaToInstruction(s, indent)).join(`\n${" ".repeat(indent - 2)}`);
        }
        throw new Error("unsupported schema type");
    }
    static fromZodSchema(schema) {
        return new this(schema);
    }
    static fromNamesAndDescriptions(schemas) {
        const zodSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[
                name,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().describe(description)
            ])));
        return new this(zodSchema);
    }
}
class AsymmetricStructuredOutputParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseOutputParser"] {
    constructor({ inputSchema }){
        super(...arguments);
        Object.defineProperty(this, "structuredInputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);
    }
    async parse(text) {
        let parsedInput;
        try {
            parsedInput = await this.structuredInputParser.parse(text);
        } catch (e) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OutputParserException"](`Failed to parse. Text: "${text}". Error: ${e}`, text);
        }
        return this.outputProcessor(parsedInput);
    }
    getFormatInstructions() {
        return this.structuredInputParser.getFormatInstructions();
    }
}
}}),
"[project]/node_modules/langchain/dist/output_parsers/router.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RouterOutputParser": (()=>RouterOutputParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$output_parsers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/output_parsers.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/output_parsers/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$structured$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/structured.js [app-route] (ecmascript)");
;
;
class RouterOutputParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$structured$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["JsonMarkdownStructuredOutputParser"] {
    constructor(schema, options){
        super(schema);
        Object.defineProperty(this, "defaultDestination", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DEFAULT"
        });
        this.defaultDestination = options?.defaultDestination ?? this.defaultDestination;
    }
    /**
     * Overrides the parse method from JsonMarkdownStructuredOutputParser.
     * This method takes a string as input, attempts to parse it, and returns
     * the parsed text. If the destination of the parsed text matches the
     * defaultDestination, the destination is set to null. If the parsing
     * fails, an OutputParserException is thrown.
     * @param text The text to be parsed.
     * @returns The parsed text as a Promise.
     */ async parse(text) {
        try {
            const parsedText = await super.parse(text);
            if (parsedText.destination?.toLowerCase() === this.defaultDestination.toLowerCase()) {
                parsedText.destination = null;
            }
            return parsedText;
        } catch (e) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OutputParserException"](`Failed to parse. Text: "${text}". Error: ${e}`, text);
        }
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/router/multi_prompt.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MultiPromptChain": (()=>MultiPromptChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/v3/external.js [app-route] (ecmascript) <export * as z>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$template$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/template.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_prompt_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_prompt_prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/llm_router.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/utils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/router.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
class MultiPromptChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MultiRouteChain"] {
    /**
     * @deprecated Use `fromLLMAndPrompts` instead
     */ static fromPrompts(llm, promptNames, promptDescriptions, promptTemplates, defaultChain, options) {
        return MultiPromptChain.fromLLMAndPrompts(llm, {
            promptNames,
            promptDescriptions,
            promptTemplates,
            defaultChain,
            multiRouteChainOpts: options
        });
    }
    /**
     * A static method that creates an instance of MultiPromptChain from a
     * BaseLanguageModel and a set of prompts. It takes in optional parameters
     * for the default chain and additional options.
     * @param llm A BaseLanguageModel instance.
     * @param promptNames An array of prompt names.
     * @param promptDescriptions An array of prompt descriptions.
     * @param promptTemplates An array of prompt templates.
     * @param defaultChain An optional BaseChain instance to be used as the default chain.
     * @param llmChainOpts Optional parameters for the LLMChainInput, excluding 'llm' and 'prompt'.
     * @param conversationChainOpts Optional parameters for the LLMChainInput, excluding 'llm' and 'outputKey'.
     * @param multiRouteChainOpts Optional parameters for the MultiRouteChainInput, excluding 'defaultChain'.
     * @returns An instance of MultiPromptChain.
     */ static fromLLMAndPrompts(llm, { promptNames, promptDescriptions, promptTemplates, defaultChain, llmChainOpts, conversationChainOpts, multiRouteChainOpts }) {
        const destinations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zipEntries"])(promptNames, promptDescriptions).map(([name, desc])=>`${name}: ${desc}`);
        const structuredOutputParserSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            destination: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().describe('name of the question answering system to use or "DEFAULT"'),
            next_inputs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
                input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().describe("a potentially modified version of the original input")
            }).describe("input to be fed to the next model")
        });
        const outputParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RouterOutputParser"](structuredOutputParserSchema);
        const destinationsStr = destinations.join("\n");
        const routerTemplate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$template$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["interpolateFString"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_prompt_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE"])(outputParser.getFormatInstructions({
            interpolationDepth: 4
        })), {
            destinations: destinationsStr
        });
        const routerPrompt = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
            template: routerTemplate,
            inputVariables: [
                "input"
            ],
            outputParser
        });
        const routerChain = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMRouterChain"].fromLLM(llm, routerPrompt);
        const destinationChains = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zipEntries"])(promptNames, promptTemplates).reduce((acc, [name, template])=>{
            let myPrompt;
            if (typeof template === "object") {
                myPrompt = template;
            } else if (typeof template === "string") {
                myPrompt = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
                    template: template,
                    inputVariables: [
                        "input"
                    ]
                });
            } else {
                throw new Error("Invalid prompt template");
            }
            acc[name] = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
                ...llmChainOpts,
                llm,
                prompt: myPrompt
            });
            return acc;
        }, {});
        const convChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConversationChain"]({
            ...conversationChainOpts,
            llm,
            outputKey: "text"
        });
        return new MultiPromptChain({
            ...multiRouteChainOpts,
            routerChain,
            destinationChains,
            defaultChain: defaultChain ?? convChain
        });
    }
    _chainType() {
        return "multi_prompt_chain";
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MULTI_RETRIEVAL_ROUTER_TEMPLATE": (()=>MULTI_RETRIEVAL_ROUTER_TEMPLATE),
    "STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE": (()=>STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE)
});
const MULTI_RETRIEVAL_ROUTER_TEMPLATE = `Given a query to a question answering system, select the system best suited for the input. You will be given the names of the available systems and a description of what questions the system is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response.

<< FORMATTING >>
Return a markdown code snippet with a JSON object formatted to look like:
\`\`\`json
{{{{
    "destination": string \\ name of the question answering system to use or "DEFAULT"
    "next_inputs": string \\ a potentially modified version of the original input
}}}}
\`\`\`

REMEMBER: "destination" MUST be one of the candidate prompt names specified below OR it can be "DEFAULT" if the input is not well suited for any of the candidate prompts.
REMEMBER: "next_inputs" can just be the original input if you don't think any modifications are needed.

<< CANDIDATE PROMPTS >>
{destinations}

<< INPUT >>
{{input}}

<< OUTPUT >>
`;
const STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE = (formatting)=>`Given a query to a question answering system, select the system best suited for the input. You will be given the names of the available systems and a description of what questions the system is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response.

<< FORMATTING >>
${formatting}

REMEMBER: "destination" MUST be one of the candidate prompt names specified below OR it can be "DEFAULT" if the input is not well suited for any of the candidate prompts.
REMEMBER: "next_inputs.query" can just be the original input if you don't think any modifications are needed.

<< CANDIDATE PROMPTS >>
{destinations}

<< INPUT >>
{{input}}

<< OUTPUT >>
`;
}}),
"[project]/node_modules/langchain/dist/chains/router/multi_retrieval_qa.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MultiRetrievalQAChain": (()=>MultiRetrievalQAChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/dist/esm/v3/external.js [app-route] (ecmascript) <export * as z>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$template$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/template.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/llm_router.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_retrieval_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/utils.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/retrieval_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/router.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
class MultiRetrievalQAChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MultiRouteChain"] {
    get outputKeys() {
        return [
            "result"
        ];
    }
    /**
     * @deprecated Use `fromRetrieversAndPrompts` instead
     */ static fromRetrievers(llm, retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, options) {
        return MultiRetrievalQAChain.fromLLMAndRetrievers(llm, {
            retrieverNames,
            retrieverDescriptions,
            retrievers,
            retrieverPrompts,
            defaults,
            multiRetrievalChainOpts: options
        });
    }
    /**
     * A static method that creates an instance of MultiRetrievalQAChain from
     * a BaseLanguageModel and a set of retrievers. It takes in optional
     * parameters for the retriever names, descriptions, prompts, defaults,
     * and additional options. It is an alternative method to fromRetrievers
     * and provides more flexibility in configuring the underlying chains.
     * @param llm A BaseLanguageModel instance.
     * @param retrieverNames An array of retriever names.
     * @param retrieverDescriptions An array of retriever descriptions.
     * @param retrievers An array of BaseRetrieverInterface instances.
     * @param retrieverPrompts An optional array of PromptTemplate instances for the retrievers.
     * @param defaults An optional MultiRetrievalDefaults instance.
     * @param multiRetrievalChainOpts Additional optional parameters for the multi-retrieval chain.
     * @param retrievalQAChainOpts Additional optional parameters for the retrieval QA chain.
     * @returns A new instance of MultiRetrievalQAChain.
     */ static fromLLMAndRetrievers(llm, { retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, multiRetrievalChainOpts, retrievalQAChainOpts }) {
        const { defaultRetriever, defaultPrompt, defaultChain } = defaults ?? {};
        if (defaultPrompt && !defaultRetriever) {
            throw new Error("`default_retriever` must be specified if `default_prompt` is \nprovided. Received only `default_prompt`.");
        }
        const destinations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zipEntries"])(retrieverNames, retrieverDescriptions).map(([name, desc])=>`${name}: ${desc}`);
        const structuredOutputParserSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            destination: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().describe('name of the question answering system to use or "DEFAULT"'),
            next_inputs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
                query: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$dist$2f$esm$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().describe("a potentially modified version of the original input")
            }).describe("input to be fed to the next model")
        });
        const outputParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RouterOutputParser"](structuredOutputParserSchema);
        const destinationsStr = destinations.join("\n");
        const routerTemplate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$template$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["interpolateFString"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_retrieval_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE"])(outputParser.getFormatInstructions({
            interpolationDepth: 4
        })), {
            destinations: destinationsStr
        });
        const routerPrompt = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
            template: routerTemplate,
            inputVariables: [
                "input"
            ],
            outputParser
        });
        const routerChain = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMRouterChain"].fromLLM(llm, routerPrompt);
        const prompts = retrieverPrompts ?? retrievers.map(()=>null);
        const destinationChains = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$utils$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zipEntries"])(retrieverNames, retrievers, prompts).reduce((acc, [name, retriever, prompt])=>{
            const opt = retrievalQAChainOpts ?? {};
            if (prompt) {
                opt.prompt = prompt;
            }
            acc[name] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RetrievalQAChain"].fromLLM(llm, retriever, opt);
            return acc;
        }, {});
        let _defaultChain;
        if (defaultChain) {
            _defaultChain = defaultChain;
        } else if (defaultRetriever) {
            _defaultChain = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RetrievalQAChain"].fromLLM(llm, defaultRetriever, {
                ...retrievalQAChainOpts,
                prompt: defaultPrompt
            });
        } else {
            const promptTemplate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_TEMPLATE"].replace("input", "query");
            const prompt = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"]({
                template: promptTemplate,
                inputVariables: [
                    "history",
                    "query"
                ]
            });
            _defaultChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConversationChain"]({
                llm,
                prompt,
                outputKey: "result"
            });
        }
        return new MultiRetrievalQAChain({
            ...multiRetrievalChainOpts,
            routerChain,
            destinationChains,
            defaultChain: _defaultChain
        });
    }
    _chainType() {
        return "multi_retrieval_qa_chain";
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/transform.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TransformChain": (()=>TransformChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
;
class TransformChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "TransformChain";
    }
    _chainType() {
        return "transform";
    }
    get inputKeys() {
        return this.inputVariables;
    }
    get outputKeys() {
        return this.outputVariables;
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "transformFunc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputVariables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.transformFunc = fields.transform;
        this.inputVariables = fields.inputVariables;
        this.outputVariables = fields.outputVariables;
    }
    async _call(values, runManager) {
        return this.transformFunc(values, runManager?.getChild("transform"));
    }
}
}}),
"[project]/node_modules/langchain/dist/output_parsers/openai_functions.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "JsonKeyOutputFunctionsParser": (()=>JsonKeyOutputFunctionsParser),
    "JsonOutputFunctionsParser": (()=>JsonOutputFunctionsParser),
    "OutputFunctionsParser": (()=>OutputFunctionsParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$utils$2f$json_patch$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/utils/json_patch.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$fast$2d$json$2d$patch$2f$src$2f$duplex$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$output_parsers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/output_parsers.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$transform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/output_parsers/transform.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/output_parsers/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$json$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/utils/json.js [app-route] (ecmascript)");
;
;
;
class OutputFunctionsParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseLLMOutputParser"] {
    static lc_name() {
        return "OutputFunctionsParser";
    }
    constructor(config){
        super();
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "langchain",
                "output_parsers",
                "openai_functions"
            ]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "argsOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        this.argsOnly = config?.argsOnly ?? this.argsOnly;
    }
    /**
     * Parses the output and returns a string representation of the function
     * call or its arguments.
     * @param generations The output of the LLM to parse.
     * @returns A string representation of the function call or its arguments.
     */ async parseResult(generations) {
        if ("message" in generations[0]) {
            const gen = generations[0];
            const functionCall = gen.message.additional_kwargs.function_call;
            if (!functionCall) {
                throw new Error(`No function_call in message ${JSON.stringify(generations)}`);
            }
            if (!functionCall.arguments) {
                throw new Error(`No arguments in function_call ${JSON.stringify(generations)}`);
            }
            if (this.argsOnly) {
                return functionCall.arguments;
            }
            return JSON.stringify(functionCall);
        } else {
            throw new Error(`No message in generations ${JSON.stringify(generations)}`);
        }
    }
}
class JsonOutputFunctionsParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$transform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseCumulativeTransformOutputParser"] {
    static lc_name() {
        return "JsonOutputFunctionsParser";
    }
    constructor(config){
        super(config);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "langchain",
                "output_parsers",
                "openai_functions"
            ]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "outputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "argsOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        this.argsOnly = config?.argsOnly ?? this.argsOnly;
        this.outputParser = new OutputFunctionsParser(config);
    }
    _diff(prev, next) {
        if (!next) {
            return undefined;
        }
        const ops = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$fast$2d$json$2d$patch$2f$src$2f$duplex$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["compare"])(prev ?? {}, next);
        return ops;
    }
    async parsePartialResult(generations) {
        const generation = generations[0];
        if (!generation.message) {
            return undefined;
        }
        const { message } = generation;
        const functionCall = message.additional_kwargs.function_call;
        if (!functionCall) {
            return undefined;
        }
        if (this.argsOnly) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$json$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parsePartialJson"])(functionCall.arguments);
        }
        return {
            ...functionCall,
            arguments: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$utils$2f$json$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parsePartialJson"])(functionCall.arguments)
        };
    }
    /**
     * Parses the output and returns a JSON object. If `argsOnly` is true,
     * only the arguments of the function call are returned.
     * @param generations The output of the LLM to parse.
     * @returns A JSON object representation of the function call or its arguments.
     */ async parseResult(generations) {
        const result = await this.outputParser.parseResult(generations);
        if (!result) {
            throw new Error(`No result from "OutputFunctionsParser" ${JSON.stringify(generations)}`);
        }
        return this.parse(result);
    }
    async parse(text) {
        try {
            const parsedResult = JSON.parse(text);
            if (this.argsOnly) {
                return parsedResult;
            }
            parsedResult.arguments = JSON.parse(parsedResult.arguments);
            return parsedResult;
        } catch (e) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OutputParserException"](`Failed to parse. Text: "${text}". Error: ${e}`);
        }
    }
    getFormatInstructions() {
        return "";
    }
}
class JsonKeyOutputFunctionsParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$output_parsers$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseLLMOutputParser"] {
    static lc_name() {
        return "JsonKeyOutputFunctionsParser";
    }
    get lc_aliases() {
        return {
            attrName: "key_name"
        };
    }
    constructor(fields){
        super(fields);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                "langchain",
                "output_parsers",
                "openai_functions"
            ]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "outputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new JsonOutputFunctionsParser()
        });
        Object.defineProperty(this, "attrName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.attrName = fields.attrName;
    }
    /**
     * Parses the output and returns a specific attribute of the parsed JSON
     * object.
     * @param generations The output of the LLM to parse.
     * @returns The value of a specific attribute of the parsed JSON object.
     */ async parseResult(generations) {
        const result = await this.outputParser.parseResult(generations);
        return result[this.attrName];
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/openai_functions/extraction.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createExtractionChain": (()=>createExtractionChain),
    "createExtractionChainFromZod": (()=>createExtractionChainFromZod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/openai_functions.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
;
;
;
;
/**
 * Function that returns an array of extraction functions. These functions
 * are used to extract relevant information from a passage.
 * @param schema The schema of the function parameters.
 * @returns An array of extraction functions.
 */ function getExtractionFunctions(schema) {
    return [
        {
            name: "information_extraction",
            description: "Extracts the relevant information from the passage.",
            parameters: {
                type: "object",
                properties: {
                    info: {
                        type: "array",
                        items: {
                            type: schema.type,
                            properties: schema.properties,
                            required: schema.required
                        }
                    }
                },
                required: [
                    "info"
                ]
            }
        }
    ];
}
const _EXTRACTION_TEMPLATE = `Extract and save the relevant entities mentioned in the following passage together with their properties.

Passage:
{input}
`;
function createExtractionChain(schema, llm) {
    const functions = getExtractionFunctions(schema);
    const prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(_EXTRACTION_TEMPLATE);
    const outputParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["JsonKeyOutputFunctionsParser"]({
        attrName: "info"
    });
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        llm,
        prompt,
        llmKwargs: {
            functions
        },
        outputParser,
        tags: [
            "openai_functions",
            "extraction"
        ]
    });
}
function createExtractionChainFromZod(// eslint-disable-next-line @typescript-eslint/no-explicit-any
schema, llm) {
    return createExtractionChain((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zodToJsonSchema"])(schema), llm);
}
}}),
"[project]/node_modules/langchain/dist/chains/openai_functions/tagging.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTaggingChain": (()=>createTaggingChain),
    "createTaggingChainFromZod": (()=>createTaggingChainFromZod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/openai_functions.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
;
;
;
;
/**
 * Function that returns an array of tagging functions. These functions
 * are used to extract relevant information from a passage.
 * @param schema The schema defining the structure of function parameters.
 * @returns An array of tagging functions.
 */ function getTaggingFunctions(schema) {
    return [
        {
            name: "information_extraction",
            description: "Extracts the relevant information from the passage.",
            parameters: schema
        }
    ];
}
const TAGGING_TEMPLATE = `Extract the desired information from the following passage.

Passage:
{input}
`;
function createTaggingChain(schema, llm, options = {}) {
    const { prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["PromptTemplate"].fromTemplate(TAGGING_TEMPLATE), ...rest } = options;
    const functions = getTaggingFunctions(schema);
    const outputParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["JsonOutputFunctionsParser"]();
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        llm,
        prompt,
        llmKwargs: {
            functions
        },
        outputParser,
        tags: [
            "openai_functions",
            "tagging"
        ],
        ...rest
    });
}
function createTaggingChainFromZod(// eslint-disable-next-line @typescript-eslint/no-explicit-any
schema, llm, options) {
    return createTaggingChain((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2d$to$2d$json$2d$schema$2f$dist$2f$esm$2f$zodToJsonSchema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["zodToJsonSchema"])(schema), llm, options);
}
}}),
"[project]/node_modules/langchain/dist/util/openapi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OpenAPISpec": (()=>OpenAPISpec)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$js$2d$yaml$2f$dist$2f$js$2d$yaml$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/js-yaml/dist/js-yaml.mjs [app-route] (ecmascript)");
;
class OpenAPISpec {
    constructor(document){
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: document
        });
    }
    get baseUrl() {
        return this.document.servers ? this.document.servers[0].url : undefined;
    }
    getPathsStrict() {
        if (!this.document.paths) {
            throw new Error("No paths found in spec");
        }
        return this.document.paths;
    }
    getParametersStrict() {
        if (!this.document.components?.parameters) {
            throw new Error("No parameters found in spec");
        }
        return this.document.components.parameters;
    }
    getSchemasStrict() {
        if (!this.document.components?.schemas) {
            throw new Error("No schemas found in spec.");
        }
        return this.document.components.schemas;
    }
    getRequestBodiesStrict() {
        if (!this.document.components?.requestBodies) {
            throw new Error("No request body found in spec.");
        }
        return this.document.components.requestBodies;
    }
    getPathStrict(path) {
        const pathItem = this.getPathsStrict()[path];
        if (pathItem === undefined) {
            throw new Error(`No path found for "${path}".`);
        }
        return pathItem;
    }
    getReferencedParameter(ref) {
        const refComponents = ref.$ref.split("/");
        const refName = refComponents[refComponents.length - 1];
        if (this.getParametersStrict()[refName] === undefined) {
            throw new Error(`No parameter found for "${refName}".`);
        }
        return this.getParametersStrict()[refName];
    }
    getRootReferencedParameter(ref) {
        let parameter = this.getReferencedParameter(ref);
        while(parameter.$ref !== undefined){
            parameter = this.getReferencedParameter(parameter);
        }
        return parameter;
    }
    getReferencedSchema(ref) {
        const refComponents = ref.$ref.split("/");
        const refName = refComponents[refComponents.length - 1];
        const schema = this.getSchemasStrict()[refName];
        if (schema === undefined) {
            throw new Error(`No schema found for "${refName}".`);
        }
        return schema;
    }
    getSchema(schema) {
        if (schema.$ref !== undefined) {
            return this.getReferencedSchema(schema);
        }
        return schema;
    }
    getRootReferencedSchema(ref) {
        let schema = this.getReferencedSchema(ref);
        while(schema.$ref !== undefined){
            schema = this.getReferencedSchema(schema);
        }
        return schema;
    }
    getReferencedRequestBody(ref) {
        const refComponents = ref.$ref.split("/");
        const refName = refComponents[refComponents.length - 1];
        const requestBodies = this.getRequestBodiesStrict();
        if (requestBodies[refName] === undefined) {
            throw new Error(`No request body found for "${refName}"`);
        }
        return requestBodies[refName];
    }
    getRootReferencedRequestBody(ref) {
        let requestBody = this.getReferencedRequestBody(ref);
        while(requestBody.$ref !== undefined){
            requestBody = this.getReferencedRequestBody(requestBody);
        }
        return requestBody;
    }
    getMethodsForPath(path) {
        const pathItem = this.getPathStrict(path);
        // This is an enum in the underlying package.
        // Werestate here to allow "import type" above and not cause warnings in certain envs.
        const possibleMethods = [
            "get",
            "put",
            "post",
            "delete",
            "options",
            "head",
            "patch",
            "trace"
        ];
        return possibleMethods.filter((possibleMethod)=>pathItem[possibleMethod] !== undefined);
    }
    getParametersForPath(path) {
        const pathItem = this.getPathStrict(path);
        if (pathItem.parameters === undefined) {
            return [];
        }
        return pathItem.parameters.map((parameter)=>{
            if (parameter.$ref !== undefined) {
                return this.getRootReferencedParameter(parameter);
            }
            return parameter;
        });
    }
    getOperation(path, method) {
        const pathItem = this.getPathStrict(path);
        if (pathItem[method] === undefined) {
            throw new Error(`No ${method} method found for "path".`);
        }
        return pathItem[method];
    }
    getParametersForOperation(operation) {
        if (operation.parameters === undefined) {
            return [];
        }
        return operation.parameters.map((parameter)=>{
            if (parameter.$ref !== undefined) {
                return this.getRootReferencedParameter(parameter);
            }
            return parameter;
        });
    }
    getRequestBodyForOperation(operation) {
        const { requestBody } = operation;
        if (requestBody?.$ref !== undefined) {
            return this.getRootReferencedRequestBody(requestBody);
        }
        return requestBody;
    }
    static getCleanedOperationId(operation, path, method) {
        let { operationId } = operation;
        if (operationId === undefined) {
            const updatedPath = path.replaceAll(/[^a-zA-Z0-9]/g, "_");
            operationId = `${updatedPath.startsWith("/") ? updatedPath.slice(1) : updatedPath}_${method}`;
        }
        return operationId.replaceAll(/-/g, "_").replaceAll(/\./g, "_").replaceAll(/\//g, "_");
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static alertUnsupportedSpec(document) {
        const warningMessage = "This may result in degraded performance. Convert your OpenAPI spec to 3.1.0 for better support.";
        const swaggerVersion = document.swagger;
        const openAPIVersion = document.openapi;
        if (openAPIVersion !== undefined && openAPIVersion !== "3.1.0") {
            console.warn(`Attempting to load an OpenAPI ${openAPIVersion} spec. ${warningMessage}`);
        } else if (swaggerVersion !== undefined) {
            console.warn(`Attempting to load a Swagger ${swaggerVersion} spec. ${warningMessage}`);
        } else {
            throw new Error(`Attempting to load an unsupported spec:\n\n${JSON.stringify(document, null, 2)}.`);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromObject(document) {
        OpenAPISpec.alertUnsupportedSpec(document);
        return new OpenAPISpec(document);
    }
    static fromString(rawString) {
        let document;
        try {
            document = JSON.parse(rawString);
        } catch (e) {
            document = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$js$2d$yaml$2f$dist$2f$js$2d$yaml$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["load"])(rawString);
        }
        return OpenAPISpec.fromObject(document);
    }
    static async fromURL(url) {
        const response = await fetch(url);
        const rawDocument = await response.text();
        return OpenAPISpec.fromString(rawDocument);
    }
}
}}),
"[project]/node_modules/langchain/dist/chains/openai_functions/openapi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "convertOpenAPISchemaToJSONSchema": (()=>convertOpenAPISchemaToJSONSchema),
    "convertOpenAPISpecToOpenAIFunctions": (()=>convertOpenAPISpecToOpenAIFunctions),
    "createOpenAPIChain": (()=>createOpenAPIChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$openai$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/openai/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$openai$2f$dist$2f$chat_models$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/openai/dist/chat_models.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$prompts$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/prompts.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@langchain/core/dist/prompts/chat.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/util/openapi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$sequential_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/output_parsers/openai_functions.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
/**
 * Formats a URL by replacing path parameters with their corresponding
 * values.
 * @param url The URL to format.
 * @param pathParams The path parameters to replace in the URL.
 * @returns The formatted URL.
 */ function formatURL(url, pathParams) {
    const expectedPathParamNames = [
        ...url.matchAll(/{(.*?)}/g)
    ].map((match)=>match[1]);
    const newParams = {};
    for (const paramName of expectedPathParamNames){
        const cleanParamName = paramName.replace(/^\.;/, "").replace(/\*$/, "");
        const value = pathParams[cleanParamName];
        let formattedValue;
        if (Array.isArray(value)) {
            if (paramName.startsWith(".")) {
                const separator = paramName.endsWith("*") ? "." : ",";
                formattedValue = `.${value.join(separator)}`;
            } else if (paramName.startsWith(",")) {
                const separator = paramName.endsWith("*") ? `${cleanParamName}=` : ",";
                formattedValue = `${cleanParamName}=${value.join(separator)}`;
            } else {
                formattedValue = value.join(",");
            }
        } else if (typeof value === "object") {
            const kvSeparator = paramName.endsWith("*") ? "=" : ",";
            const kvStrings = Object.entries(value).map(([k, v])=>k + kvSeparator + v);
            let entrySeparator;
            if (paramName.startsWith(".")) {
                entrySeparator = ".";
                formattedValue = ".";
            } else if (paramName.startsWith(";")) {
                entrySeparator = ";";
                formattedValue = ";";
            } else {
                entrySeparator = ",";
                formattedValue = "";
            }
            formattedValue += kvStrings.join(entrySeparator);
        } else {
            if (paramName.startsWith(".")) {
                formattedValue = `.${value}`;
            } else if (paramName.startsWith(";")) {
                formattedValue = `;${cleanParamName}=${value}`;
            } else {
                formattedValue = value;
            }
        }
        newParams[paramName] = formattedValue;
    }
    let formattedUrl = url;
    for (const [key, newValue] of Object.entries(newParams)){
        formattedUrl = formattedUrl.replace(`{${key}}`, newValue);
    }
    return formattedUrl;
}
/**
 * Converts OpenAPI parameters to JSON schema format.
 * @param params The OpenAPI parameters to convert.
 * @param spec The OpenAPI specification that contains the parameters.
 * @returns The JSON schema representation of the OpenAPI parameters.
 */ function convertOpenAPIParamsToJSONSchema(params, spec) {
    return params.reduce((jsonSchema, param)=>{
        let schema;
        if (param.schema) {
            schema = spec.getSchema(param.schema);
            // eslint-disable-next-line no-param-reassign
            jsonSchema.properties[param.name] = convertOpenAPISchemaToJSONSchema(schema, spec);
        } else if (param.content) {
            const mediaTypeSchema = Object.values(param.content)[0].schema;
            if (mediaTypeSchema) {
                schema = spec.getSchema(mediaTypeSchema);
            }
            if (!schema) {
                return jsonSchema;
            }
            if (schema.description === undefined) {
                schema.description = param.description ?? "";
            }
            // eslint-disable-next-line no-param-reassign
            jsonSchema.properties[param.name] = convertOpenAPISchemaToJSONSchema(schema, spec);
        } else {
            return jsonSchema;
        }
        if (param.required && Array.isArray(jsonSchema.required)) {
            jsonSchema.required.push(param.name);
        }
        return jsonSchema;
    }, {
        type: "object",
        properties: {},
        required: [],
        additionalProperties: {}
    });
}
function convertOpenAPISchemaToJSONSchema(schema, spec) {
    if (schema.type === "object") {
        return Object.keys(schema.properties ?? {}).reduce((jsonSchema, propertyName)=>{
            if (!schema.properties) {
                return jsonSchema;
            }
            const openAPIProperty = spec.getSchema(schema.properties[propertyName]);
            if (openAPIProperty.type === undefined) {
                return jsonSchema;
            }
            // eslint-disable-next-line no-param-reassign
            jsonSchema.properties[propertyName] = convertOpenAPISchemaToJSONSchema(openAPIProperty, spec);
            if ((openAPIProperty.required || schema.required?.includes(propertyName)) && jsonSchema.required !== undefined) {
                jsonSchema.required.push(propertyName);
            }
            return jsonSchema;
        }, {
            type: "object",
            properties: {},
            required: [],
            additionalProperties: {}
        });
    }
    if (schema.type === "array") {
        return {
            type: "array",
            items: convertOpenAPISchemaToJSONSchema(schema.items ?? {}, spec),
            minItems: schema.minItems,
            maxItems: schema.maxItems
        };
    }
    return {
        type: schema.type ?? "string"
    };
}
function convertOpenAPISpecToOpenAIFunctions(spec) {
    if (!spec.document.paths) {
        return {
            openAIFunctions: []
        };
    }
    const openAIFunctions = [];
    const nameToCallMap = {};
    for (const path of Object.keys(spec.document.paths)){
        const pathParameters = spec.getParametersForPath(path);
        for (const method of spec.getMethodsForPath(path)){
            const operation = spec.getOperation(path, method);
            if (!operation) {
                return {
                    openAIFunctions: []
                };
            }
            const operationParametersByLocation = pathParameters.concat(spec.getParametersForOperation(operation)).reduce((operationParams, param)=>{
                if (!operationParams[param.in]) {
                    // eslint-disable-next-line no-param-reassign
                    operationParams[param.in] = [];
                }
                operationParams[param.in].push(param);
                return operationParams;
            }, {});
            const paramLocationToRequestArgNameMap = {
                query: "params",
                header: "headers",
                cookie: "cookies",
                path: "path_params"
            };
            const requestArgsSchema = {};
            for (const paramLocation of Object.keys(paramLocationToRequestArgNameMap)){
                if (operationParametersByLocation[paramLocation]) {
                    requestArgsSchema[paramLocationToRequestArgNameMap[paramLocation]] = convertOpenAPIParamsToJSONSchema(operationParametersByLocation[paramLocation], spec);
                }
            }
            const requestBody = spec.getRequestBodyForOperation(operation);
            if (requestBody?.content !== undefined) {
                const requestBodySchemas = {};
                for (const [mediaType, mediaTypeObject] of Object.entries(requestBody.content)){
                    if (mediaTypeObject.schema !== undefined) {
                        const schema = spec.getSchema(mediaTypeObject.schema);
                        requestBodySchemas[mediaType] = convertOpenAPISchemaToJSONSchema(schema, spec);
                    }
                }
                const mediaTypes = Object.keys(requestBodySchemas);
                if (mediaTypes.length === 1) {
                    requestArgsSchema.data = requestBodySchemas[mediaTypes[0]];
                } else if (mediaTypes.length > 1) {
                    requestArgsSchema.data = {
                        anyOf: Object.values(requestBodySchemas)
                    };
                }
            }
            const openAIFunction = {
                name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAPISpec"].getCleanedOperationId(operation, path, method),
                description: operation.description ?? operation.summary ?? "",
                parameters: {
                    type: "object",
                    properties: requestArgsSchema,
                    // All remaining top-level parameters are required
                    required: Object.keys(requestArgsSchema)
                }
            };
            openAIFunctions.push(openAIFunction);
            const baseUrl = (spec.baseUrl ?? "").endsWith("/") ? (spec.baseUrl ?? "").slice(0, -1) : spec.baseUrl ?? "";
            nameToCallMap[openAIFunction.name] = {
                method,
                url: baseUrl + path
            };
        }
    }
    return {
        openAIFunctions,
        defaultExecutionMethod: async (name, // eslint-disable-next-line @typescript-eslint/no-explicit-any
        requestArgs, options)=>{
            const { headers: customHeaders, params: customParams, ...rest } = options ?? {};
            const { method, url } = nameToCallMap[name];
            const requestParams = requestArgs.params ?? {};
            const nonEmptyParams = Object.keys(requestParams).reduce(// eslint-disable-next-line @typescript-eslint/no-explicit-any
            (filteredArgs, argName)=>{
                if (requestParams[argName] !== "" && requestParams[argName] !== null && requestParams[argName] !== undefined) {
                    // eslint-disable-next-line no-param-reassign
                    filteredArgs[argName] = requestParams[argName];
                }
                return filteredArgs;
            }, {});
            const queryString = new URLSearchParams({
                ...nonEmptyParams,
                ...customParams
            }).toString();
            const pathParams = requestArgs.path_params;
            const formattedUrl = formatURL(url, pathParams) + (queryString.length ? `?${queryString}` : "");
            const headers = {};
            let body;
            if (requestArgs.data !== undefined) {
                let contentType = "text/plain";
                if (typeof requestArgs.data !== "string") {
                    if (typeof requestArgs.data === "object") {
                        contentType = "application/json";
                    }
                    body = JSON.stringify(requestArgs.data);
                } else {
                    body = requestArgs.data;
                }
                headers["content-type"] = contentType;
            }
            const response = await fetch(formattedUrl, {
                ...requestArgs,
                method,
                headers: {
                    ...headers,
                    ...requestArgs.headers,
                    ...customHeaders
                },
                body,
                ...rest
            });
            let output;
            if (response.status < 200 || response.status > 299) {
                output = `${response.status}: ${response.statusText} for ${name} called with ${JSON.stringify(queryString)}`;
            } else {
                output = await response.text();
            }
            return output;
        }
    };
}
/**
 * A chain for making simple API requests.
 */ class SimpleRequestChain extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseChain"] {
    static lc_name() {
        return "SimpleRequestChain";
    }
    constructor(config){
        super();
        Object.defineProperty(this, "requestMethod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "function"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "response"
        });
        this.requestMethod = config.requestMethod;
    }
    get inputKeys() {
        return [
            this.inputKey
        ];
    }
    get outputKeys() {
        return [
            this.outputKey
        ];
    }
    _chainType() {
        return "simple_request_chain";
    }
    /** @ignore */ async _call(values, _runManager) {
        const inputKeyValue = values[this.inputKey];
        const methodName = inputKeyValue.name;
        const args = inputKeyValue.arguments;
        const response = await this.requestMethod(methodName, args);
        return {
            [this.outputKey]: response
        };
    }
}
async function createOpenAPIChain(spec, options = {}) {
    let convertedSpec;
    if (typeof spec === "string") {
        try {
            convertedSpec = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAPISpec"].fromURL(spec);
        } catch (e) {
            try {
                convertedSpec = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAPISpec"].fromString(spec);
            } catch (e) {
                throw new Error(`Unable to parse spec from source ${spec}.`);
            }
        }
    } else {
        convertedSpec = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$util$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAPISpec"].fromObject(spec);
    }
    const { openAIFunctions, defaultExecutionMethod } = convertOpenAPISpecToOpenAIFunctions(convertedSpec);
    if (defaultExecutionMethod === undefined) {
        throw new Error(`Could not parse any valid operations from the provided spec.`);
    }
    const { llm = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$openai$2f$dist$2f$chat_models$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatOpenAI"]({
        modelName: "gpt-3.5-turbo-0613"
    }), prompt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ChatPromptTemplate"].fromMessages([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$langchain$2f$core$2f$dist$2f$prompts$2f$chat$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HumanMessagePromptTemplate"].fromTemplate("Use the provided API's to respond to this user query:\n\n{query}")
    ]), requestChain = new SimpleRequestChain({
        requestMethod: async (name, args)=>defaultExecutionMethod(name, args, {
                headers: options.headers,
                params: options.params
            })
    }), llmChainInputs = {}, verbose, ...rest } = options;
    const formatChain = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LLMChain"]({
        llm,
        prompt,
        outputParser: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$output_parsers$2f$openai_functions$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["JsonOutputFunctionsParser"]({
            argsOnly: false
        }),
        outputKey: "function",
        llmKwargs: {
            functions: openAIFunctions
        },
        ...llmChainInputs
    });
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$sequential_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SequentialChain"]({
        chains: [
            formatChain,
            requestChain
        ],
        outputVariables: [
            "response"
        ],
        inputVariables: formatChain.inputKeys,
        verbose,
        ...rest
    });
}
}}),
"[project]/node_modules/langchain/dist/chains/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$api$2f$api_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/api/api_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$sequential_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$chat_vector_db_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/chat_vector_db_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$analyze_documents_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/analyze_documents_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$vector_db_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/vector_db_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/summarization/load.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversational_retrieval_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversational_retrieval_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/retrieval_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_principle$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_moderation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_moderation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/llm_router.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_retrieval_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$transform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/transform.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$extraction$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/extraction.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$tagging$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/tagging.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/openapi.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/langchain/dist/chains/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$llm_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/llm_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$api$2f$api_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/api/api_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$sequential_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/sequential_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$combine_docs_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/combine_docs_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$chat_vector_db_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/chat_vector_db_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$analyze_documents_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/analyze_documents_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$vector_db_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/vector_db_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$question_answering$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/question_answering/load.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$summarization$2f$load$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/summarization/load.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$conversational_retrieval_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/conversational_retrieval_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/retrieval_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_chain$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$constitutional_ai$2f$constitutional_principle$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_moderation$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_moderation.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_route$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_route.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$llm_router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/llm_router.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_prompt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_prompt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$router$2f$multi_retrieval_qa$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/router/multi_retrieval_qa.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$transform$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/transform.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$extraction$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/extraction.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$tagging$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/tagging.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$openai_functions$2f$openapi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/openai_functions/openapi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/chains.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/index.js [app-route] (ecmascript) <module evaluation>");
;
}}),
"[project]/node_modules/langchain/chains.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$chains$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/chains/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$chains$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/chains.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/langchain/text_splitter.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <module evaluation>");
;
}}),
"[project]/node_modules/langchain/text_splitter.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$dist$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/dist/text_splitter.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$langchain$2f$text_splitter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/langchain/text_splitter.js [app-route] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_langchain_f9d2a0aa._.js.map