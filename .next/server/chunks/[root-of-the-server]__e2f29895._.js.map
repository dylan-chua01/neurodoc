{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/db.ts"],"sourcesContent":["// lib/db.ts\n// \"use server\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\nimport { PGVectorStore } from \"@langchain/community/vectorstores/pgvector\";\nimport { Pool } from \"pg\";\n\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const db = pool;\nexport async function getDbConnection() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error('Neon Database URL is not defined');\n  }\n  return neon(process.env.DATABASE_URL);\n}\n\nexport async function getVectorStore(fileUrl: string) {\n    const embeddings = new GoogleGenerativeAIEmbeddings({\n      modelName: \"embedding-001\",\n      apiKey: process.env.GEMINI_API_KEY!\n    });\n  \n    const config = {\n      postgresConnectionOptions: {\n        connectionString: process.env.DATABASE_URL!\n      },\n      tableName: \"pdf_embeddings\",\n      columns: {\n        idColumnName: \"id\",\n        vectorColumnName: \"embedding\",\n        contentColumnName: \"content\",\n        metadataColumnName: \"metadata\",\n      },\n      filter: {\n        original_file_url: fileUrl // Add filter to scope to this PDF\n      }\n    };\n  \n    return await PGVectorStore.initialize(embeddings, config);\n  }"],"names":[],"mappings":"AAAA,YAAY;AACZ,gBAAgB;;;;;;AAChB;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEO,MAAM,KAAK;AACX,eAAe;IACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;QAC7B,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AACtC;AAEO,eAAe,eAAe,OAAe;IAChD,MAAM,aAAa,IAAI,sKAAA,CAAA,+BAA4B,CAAC;QAClD,WAAW;QACX,QAAQ,QAAQ,GAAG,CAAC,cAAc;IACpC;IAEA,MAAM,SAAS;QACb,2BAA2B;YACzB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC5C;QACA,WAAW;QACX,SAAS;YACP,cAAc;YACd,kBAAkB;YAClB,mBAAmB;YACnB,oBAAoB;QACtB;QACA,QAAQ;YACN,mBAAmB,QAAQ,kCAAkC;QAC/D;IACF;IAEA,OAAO,MAAM,8KAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,YAAY;AACpD","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/app/api/save-notes/route.ts"],"sourcesContent":["// app/api/save-notes/route.ts\nimport { NextResponse } from 'next/server';\nimport { currentUser } from '@clerk/nextjs/server';\nimport { db } from '@/lib/db';\n\nexport async function POST(req: Request) {\n  try {\n    // 1. Authenticate user\n    const user = await currentUser();\n    if (!user) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    // 2. Parse request body\n    const { fileUrl, userId, notes } = await req.json();\n\n    // 3. Validate inputs\n    if (!fileUrl || typeof fileUrl !== 'string') {\n      return NextResponse.json(\n        { error: \"Invalid file URL\" },\n        { status: 400 }\n      );\n    }\n\n    if (userId && userId !== user.id) {\n      return NextResponse.json(\n        { error: \"User ID mismatch\" },\n        { status: 403 }\n      );\n    }\n\n    // 4. Save or update notes in database\n    const result = await db.query(\n      `INSERT INTO user_notes (user_id, file_url, notes)\n       VALUES ($1, $2, $3)\n       ON CONFLICT (user_id, file_url) \n       DO UPDATE SET notes = $3, updated_at = NOW()\n       RETURNING *`,\n      [user.id, fileUrl, notes]\n    );\n\n    // 5. Return success response\n    return NextResponse.json({\n      success: true,\n      notes: result.rows[0]?.notes\n    });\n\n  } catch (error) {\n    console.error('Error saving notes:', error);\n    return NextResponse.json(\n      { \n        error: \"Failed to save notes\",\n        details: process.env.NODE_ENV === 'development' \n          ? error instanceof Error ? error.message : String(error)\n          : undefined\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AACA;;;;;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,uBAAuB;QACvB,MAAM,OAAO,MAAM,CAAA,GAAA,4LAAA,CAAA,cAAW,AAAD;QAC7B,IAAI,CAAC,MAAM;YACT,OAAO,IAAI,SAAS,gBAAgB;gBAAE,QAAQ;YAAI;QACpD;QAEA,wBAAwB;QACxB,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,IAAI;QAEjD,qBAAqB;QACrB,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,UAAU,WAAW,KAAK,EAAE,EAAE;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,SAAS,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAC3B,CAAC;;;;kBAIW,CAAC,EACb;YAAC,KAAK,EAAE;YAAE;YAAS;SAAM;QAG3B,6BAA6B;QAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,OAAO,IAAI,CAAC,EAAE,EAAE;QACzB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,uCACL,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAEtD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}