{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/db.ts"],"sourcesContent":["// lib/db.ts\n// \"use server\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\nimport { PGVectorStore } from \"@langchain/community/vectorstores/pgvector\";\nimport { Pool } from \"pg\";\n\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false,\n  },\n});\n\nexport const db = pool;\nexport async function getDbConnection() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error('Neon Database URL is not defined');\n  }\n  return neon(process.env.DATABASE_URL);\n}\n\nexport async function getVectorStore(fileUrl: string) {\n    const embeddings = new GoogleGenerativeAIEmbeddings({\n      modelName: \"embedding-001\",\n      apiKey: process.env.GEMINI_API_KEY!\n    });\n  \n    const config = {\n      postgresConnectionOptions: {\n        connectionString: process.env.DATABASE_URL!\n      },\n      tableName: \"pdf_embeddings\",\n      columns: {\n        idColumnName: \"id\",\n        vectorColumnName: \"embedding\",\n        contentColumnName: \"content\",\n        metadataColumnName: \"metadata\",\n      },\n      filter: {\n        original_file_url: fileUrl // Add filter to scope to this PDF\n      }\n    };\n  \n    return await PGVectorStore.initialize(embeddings, config);\n  }"],"names":[],"mappings":"AAAA,YAAY;AACZ,gBAAgB;;;;;;AAChB;AACA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;AAGA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEO,MAAM,KAAK;AACX,eAAe;IACpB,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;QAC7B,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,CAAA,GAAA,wJAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AACtC;AAEO,eAAe,eAAe,OAAe;IAChD,MAAM,aAAa,IAAI,sKAAA,CAAA,+BAA4B,CAAC;QAClD,WAAW;QACX,QAAQ,QAAQ,GAAG,CAAC,cAAc;IACpC;IAEA,MAAM,SAAS;QACb,2BAA2B;YACzB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC5C;QACA,WAAW;QACX,SAAS;YACP,cAAc;YACd,kBAAkB;YAClB,mBAAmB;YACnB,oBAAoB;QACtB;QACA,QAAQ;YACN,mBAAmB,QAAQ,kCAAkC;QAC/D;IACF;IAEA,OAAO,MAAM,8KAAA,CAAA,gBAAa,CAAC,UAAU,CAAC,YAAY;AACpD","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/utils/helpers.ts"],"sourcesContent":["export const isDev = process.env.NODE_ENV === 'development';"],"names":[],"mappings":";;;AAAO,MAAM,QAAQ,oDAAyB","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/utils/constants.ts"],"sourcesContent":["import { isDev } from \"./helpers\";\n\nexport const pricingPlans = [\n    {\n        id: 'weekly',\n        name: 'Weekly',\n        description: 'Perfect for one-off projects',\n        price: 5,\n        chatLimit: 10,\n        items: [\n            '5 PDF summaries per week',\n            'Standard processing speed',\n            'Email suport',\n            'Makrdown Export'\n        ],\n        paymentLink: isDev ? 'https://buy.stripe.com/test_5kA6oS9LUchLdFu6oq': '',\n        priceId: isDev ? 'price_1RKbkXRggn37AxFTr8j1CCFo': '',\n    },\n    {\n        id: 'basic',\n        name: 'Basic',\n        description: 'Perfect for personal use',\n        price: 7,\n        chatLimit: 3,\n        items: [\n            '25 PDF summaries per month',\n            'Standard processing speed',\n            'Email suport',\n            'Makrdown Export',\n            '10 questions per Document'\n        ],\n        paymentLink: isDev ? 'https://buy.stripe.com/test_00gfZs9LU6XreJycMM': '',\n        priceId: isDev ? 'price_1RKbioRggn37AxFT4vWWTQ1P': '',\n    },\n    {\n        id: 'pro',\n        name: 'Pro',\n        description: 'For professionals and teams',\n        price: 20,\n        paymentLink: isDev ? 'https://buy.stripe.com/test_9AQfZsf6ea9Dbxm5kl': '',\n        priceId: isDev ? 'price_1RKbkXRggn37AxFTIC1oZeVg': '',\n        items: [\n            'Start with a 7 day free trial',\n            'Unlimited PDF summaries',\n            'Priority processing',\n            'Email and WhatsApp Support',\n            'Markdown Export',\n            'Unlimited questions per Document'\n        ],\n    }\n];\n\nexport const containerVariants = {\n    hidden: {opacity:0},\n    visible: {\n        opacity: 1,\n        transition: {\n            staggerChildren: 0.2,\n            delayChildren: 0.1,\n        }\n    }\n}\n\nexport const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n        opacity: 1,\n        transition: {\n            type: 'spring',\n            damping: 15,\n            siffnness: 50,\n            duration: 0.8,\n        }\n    }\n}"],"names":[],"mappings":";;;;;AAAA;;AAEO,MAAM,eAAe;IACxB;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,WAAW;QACX,OAAO;YACH;YACA;YACA;YACA;SACH;QACD,aAAa,kHAAA,CAAA,QAAK,GAAG,mDAAkD;QACvE,SAAS,kHAAA,CAAA,QAAK,GAAG,mCAAkC;IACvD;IACA;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,WAAW;QACX,OAAO;YACH;YACA;YACA;YACA;YACA;SACH;QACD,aAAa,kHAAA,CAAA,QAAK,GAAG,mDAAkD;QACvE,SAAS,kHAAA,CAAA,QAAK,GAAG,mCAAkC;IACvD;IACA;QACI,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,aAAa,kHAAA,CAAA,QAAK,GAAG,mDAAkD;QACvE,SAAS,kHAAA,CAAA,QAAK,GAAG,mCAAkC;QACnD,OAAO;YACH;YACA;YACA;YACA;YACA;YACA;SACH;IACL;CACH;AAEM,MAAM,oBAAoB;IAC7B,QAAQ;QAAC,SAAQ;IAAC;IAClB,SAAS;QACL,SAAS;QACT,YAAY;YACR,iBAAiB;YACjB,eAAe;QACnB;IACJ;AACJ;AAEO,MAAM,eAAe;IACxB,QAAQ;QAAE,SAAS;QAAG,GAAG;IAAG;IAC5B,SAAS;QACL,SAAS;QACT,YAAY;YACR,MAAM;YACN,SAAS;YACT,WAAW;YACX,UAAU;QACd;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/summaries.ts"],"sourcesContent":["import { getDbConnection } from './db';\n\nexport async function getSummaries(userId: string) {\n    const sql = await getDbConnection();\n    const summaries = await sql`\n        SELECT * \n        FROM pdf_summaries \n        WHERE user_id = ${userId} \n        ORDER BY created_at DESC\n    `;\n    return summaries;\n}\n\nexport async function getSummaryById(id: string) {\n    try {\n        const sql = await getDbConnection();\n        const [summary] = await sql`\n            SELECT\n                id,\n                user_id,\n                title,\n                original_file_url,\n                summary_text,\n                status,\n                created_at,\n                updated_at,\n                file_name,\n                LENGTH(summary_text) - LENGTH(REPLACE(summary_text, ' ', '')) + 1 as word_count\n            FROM pdf_summaries \n            WHERE id = ${id}\n        `;\n        return summary;\n    } catch (err) {\n        console.error('Error fetching summary by id', err);\n        return null;\n    }\n}\n\nexport async function getUserUploadCount(userId: string) {\n    try {\n    const sql = await getDbConnection();\n    const [result] = await sql`SELECT COUNT(*) as count FROM pdf_summaries WHERE user_id = ${userId}`;\n    return result?.count || 0;\n    } catch (err) {\n        console.error('Error fetching user upload count', err);\n        return 0;\n    }\n\n}"],"names":[],"mappings":";;;;;AAAA;;;;;;AAEO,eAAe,aAAa,MAAc;IAC7C,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;IAChC,MAAM,YAAY,MAAM,GAAG,CAAC;;;wBAGR,EAAE,OAAO;;IAE7B,CAAC;IACD,OAAO;AACX;AAEO,eAAe,eAAe,EAAU;IAC3C,IAAI;QACA,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;QAChC,MAAM,CAAC,QAAQ,GAAG,MAAM,GAAG,CAAC;;;;;;;;;;;;;uBAab,EAAE,GAAG;QACpB,CAAC;QACD,OAAO;IACX,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;IACX;AACJ;AAEO,eAAe,mBAAmB,MAAc;IACnD,IAAI;QACJ,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;QAChC,MAAM,CAAC,OAAO,GAAG,MAAM,GAAG,CAAC,4DAA4D,EAAE,OAAO,CAAC;QACjG,OAAO,QAAQ,SAAS;IACxB,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO;IACX;AAEJ","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/user.ts"],"sourcesContent":["import { pricingPlans } from \"@/utils/constants\";\nimport { getDbConnection } from \"./db\";\nimport { getUserUploadCount } from \"./summaries\";\nimport { User } from \"@clerk/nextjs/server\";\nimport { db } from \"./db\"; // Make sure you have this import\n\nexport async function getPriceIdForActiveuser(email: string) {\n  const sql = await getDbConnection();\n  const query = await sql`SELECT price_id FROM users WHERE email = ${email} AND status = 'active'`;\n  return query?.[0]?.price_id || null;\n}\n\nexport async function hasActivePlan(email: string) {\n  const sql = await getDbConnection();\n  const query = await sql`SELECT price_id, status FROM users WHERE email = ${email} AND status = 'active' AND price_id IS NOT NULL`;\n  return query && query.length > 0;\n}\n\nexport async function hasReachedUploadLimit(userId: string) {\n  const uploadCount = await getUserUploadCount(userId);\n  const priceId = await getPriceIdForActiveuser(userId);\n  const isPro = pricingPlans.find((plan) => plan.priceId === priceId)?.id === 'pro';\n  const uploadLimit: number = isPro ? 1000 : 5;\n  return { hasReachedLimit: uploadCount >= uploadLimit, uploadLimit };\n}\n\nexport async function getSubscriptionStatus(user: User) {\n  if (!user.emailAddresses?.[0]?.emailAddress) {\n    return false;\n  }\n  return await hasActivePlan(user.emailAddresses[0].emailAddress);\n}\n\nexport async function checkChatLimit(userId: string, fileUrl: string) {\n  try {\n    // Get user's plan limits\n    const planResult = await db.query(\n      `SELECT chat_limit FROM user_plans WHERE user_id = $1`,\n      [userId]\n    );\n    const chatLimit = planResult.rows[0]?.chat_limit || 20;\n\n    // Get current usage\n    const usageResult = await db.query(\n      `SELECT COUNT(*) as count FROM chat_history \n       WHERE user_id = $1 AND file_url = $2 \n       AND created_at > NOW() - INTERVAL '24 hours'`,\n      [userId, fileUrl]\n    );\n    const currentUsage = parseInt(usageResult.rows[0]?.count || '0', 10);\n\n    return {\n      hasReachedLimit: currentUsage >= chatLimit,\n      chatLimit,\n      currentUsage\n    };\n  } catch (error) {\n    console.error('Error checking chat limit:', error);\n    // Fail open in production, closed in development\n    return {\n      hasReachedLimit: process.env.NODE_ENV === 'development',\n      chatLimit: 3,\n      currentUsage: 0\n    };\n  }\n}\n\nexport async function incrementChatUsage(userId: string, fileUrl: string) {\n  try {\n    await db.query(\n      `INSERT INTO chat_history (user_id, file_url, created_at) \n       VALUES ($1, $2, NOW())`,\n      [userId, fileUrl]\n    );\n  } catch (error) {\n    console.error('Error incrementing chat usage:', error);\n    // Even if usage tracking fails, we shouldn't block the user\n  }\n}"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;;;;;;;AAIO,eAAe,wBAAwB,KAAa;IACzD,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;IAChC,MAAM,QAAQ,MAAM,GAAG,CAAC,yCAAyC,EAAE,MAAM,sBAAsB,CAAC;IAChG,OAAO,OAAO,CAAC,EAAE,EAAE,YAAY;AACjC;AAEO,eAAe,cAAc,KAAa;IAC/C,MAAM,MAAM,MAAM,CAAA,GAAA,2GAAA,CAAA,kBAAe,AAAD;IAChC,MAAM,QAAQ,MAAM,GAAG,CAAC,iDAAiD,EAAE,MAAM,+CAA+C,CAAC;IACjI,OAAO,SAAS,MAAM,MAAM,GAAG;AACjC;AAEO,eAAe,sBAAsB,MAAc;IACxD,MAAM,cAAc,MAAM,CAAA,GAAA,kHAAA,CAAA,qBAAkB,AAAD,EAAE;IAC7C,MAAM,UAAU,MAAM,wBAAwB;IAC9C,MAAM,QAAQ,oHAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,OAAO,KAAK,UAAU,OAAO;IAC5E,MAAM,cAAsB,QAAQ,OAAO;IAC3C,OAAO;QAAE,iBAAiB,eAAe;QAAa;IAAY;AACpE;AAEO,eAAe,sBAAsB,IAAU;IACpD,IAAI,CAAC,KAAK,cAAc,EAAE,CAAC,EAAE,EAAE,cAAc;QAC3C,OAAO;IACT;IACA,OAAO,MAAM,cAAc,KAAK,cAAc,CAAC,EAAE,CAAC,YAAY;AAChE;AAEO,eAAe,eAAe,MAAc,EAAE,OAAe;IAClE,IAAI;QACF,yBAAyB;QACzB,MAAM,aAAa,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAC/B,CAAC,oDAAoD,CAAC,EACtD;YAAC;SAAO;QAEV,MAAM,YAAY,WAAW,IAAI,CAAC,EAAE,EAAE,cAAc;QAEpD,oBAAoB;QACpB,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAChC,CAAC;;mDAE4C,CAAC,EAC9C;YAAC;YAAQ;SAAQ;QAEnB,MAAM,eAAe,SAAS,YAAY,IAAI,CAAC,EAAE,EAAE,SAAS,KAAK;QAEjE,OAAO;YACL,iBAAiB,gBAAgB;YACjC;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,iDAAiD;QACjD,OAAO;YACL,iBAAiB,oDAAyB;YAC1C,WAAW;YACX,cAAc;QAChB;IACF;AACF;AAEO,eAAe,mBAAmB,MAAc,EAAE,OAAe;IACtE,IAAI;QACF,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CACZ,CAAC;6BACsB,CAAC,EACxB;YAAC;YAAQ;SAAQ;IAErB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;IAChD,4DAA4D;IAC9D;AACF","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PDFLoader } from \"@langchain/community/document_loaders/fs/pdf\";\nimport { ChatGoogleGenerativeAI } from '@langchain/google-genai';\nimport { ConversationalRetrievalQAChain } from 'langchain/chains';\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { getVectorStore } from '@/lib/db';\nimport { AIMessage, HumanMessage } from '@langchain/core/messages';\nimport { currentUser } from '@clerk/nextjs/server';\nimport { checkChatLimit, incrementChatUsage } from '@/lib/user';\n\n\nconst SYSTEM_PROMPT = `\nYou are an expert document assistant. Provide **clear, concise, and accurate answers** based strictly on the document contents.\n\nInstructions:\n- Keep responses under 150 words unless context demands more.\n- Use bullet points where appropriate.\n- Always cite the document with [p.X] where possible.\n- Avoid repetition or generic analysis.\n\nFormat:\n## Answer\n<Concise, factual answer here>\n\n## Source Evidence\n- \"Quoted text\" [p.X]\n- ...\n`;\n\n\n\nexport async function POST(req: Request) {\n  // 1. Authenticate user\n  const user = await currentUser();\n  if (!user) {\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n\n  // 2. Parse request body once\n  let requestBody;\n  try {\n    requestBody = await req.json();\n  } catch (error) {\n    return NextResponse.json(\n      { error: \"Invalid request body\" },\n      { status: 400 }\n    );\n  }\n\n  const { fileUrl, question, chatHistory = [] } = requestBody;\n\n  // 3. Validate inputs\n  if (!fileUrl || typeof fileUrl !== 'string') {\n    return NextResponse.json(\n      { error: \"Invalid file URL\" },\n      { status: 400 }\n    );\n  }\n\n  if (!question?.trim() || typeof question !== 'string') {\n    return NextResponse.json(\n      { error: \"Invalid or missing question\" },\n      { status: 400 }\n    );\n  }\n\n  // 4. Check chat limits - now properly enforced\n  const limitCheck = await checkChatLimit(user.id, fileUrl);\n\n  if (limitCheck.hasReachedLimit) {\n    \n    return NextResponse.json(\n      { \n        error: `You've reached your limit of ${limitCheck.chatLimit} messages for this document`,\n        limit: limitCheck.chatLimit,\n        currentUsage: limitCheck.currentUsage,\n        upgradeUrl: \"/pricing\"\n      },\n      { status: 429 }\n      \n    );\n  }\n\n  try {\n    // 5. Process PDF\n    const fileResponse = await fetch(fileUrl);\n    if (!fileResponse.ok) {\n      throw new Error(`Failed to fetch PDF: ${fileResponse.statusText}`);\n    }\n    const fileData = await fileResponse.blob();\n\n    // 6. Load and split document\n    const loader = new PDFLoader(fileData, {\n      splitPages: true,\n      parsedItemSeparator: \"\\n\\n\",\n    });\n    const rawDocs = await loader.load();\n    \n    const textSplitter = new RecursiveCharacterTextSplitter({\n      chunkSize: 800,\n      chunkOverlap: 200,\n      separators: [\"\\n\\n\", \"\\n\", \"  \", \" \", \"\"],\n    });\n\n    const docs = await textSplitter.splitDocuments(\n      rawDocs.map(doc => ({\n        ...doc,\n        metadata: {\n          ...doc.metadata,\n          pdfInfo: {\n            totalPages: rawDocs.length,\n            pageNumber: doc.metadata.loc?.pageNumber,\n          }\n        }\n      }))\n    );\n\n    // 7. Vector store operations\n    const vectorStore = await getVectorStore(fileUrl);\n    await vectorStore.addDocuments(docs);\n\n    const retriever = vectorStore.asRetriever({\n      k: 3,\n      searchType: \"mmr\",\n      searchKwargs: {\n        fetchK: 10,\n        lambda: 0.5,\n      },\n    });\n\n    // 8. Initialize Gemini\n    const model = new ChatGoogleGenerativeAI({\n      model: \"gemini-2.0-flash\",\n      maxOutputTokens: 2048,\n      temperature: 0.1,\n      topP: 0.95,\n      topK: 40,\n      apiKey: process.env.GEMINI_API_KEY!,\n    });\n\n    // 9. Create QA chain with enhanced prompt\n    const chain = ConversationalRetrievalQAChain.fromLLM(\n      model,\n      retriever,\n      {\n        returnSourceDocuments: true,\n        qaChainOptions: {\n          type: \"stuff\",\n          prompt: new PromptTemplate({\n            template: `${SYSTEM_PROMPT}\n            \n            Context:\n            {context}\n            \n            Question: {question}\n            \n            Detailed Answer:`,\n            inputVariables: [\"context\", \"question\"],\n          }),\n        },\n        questionGeneratorChainOptions: {\n          template: `Given this conversation and a follow up question:\n            Chat History: {chat_history}\n            Follow Up Input: {question}\n            Standalone Question (include all key details):`,\n        },\n      }\n    );\n\n    // 10. Format chat history\n    const formattedHistory = chatHistory.map((msg: string, i: number) => [\n      new HumanMessage(msg),\n      new AIMessage(chatHistory[i+1] || \"\"),\n    ]).flat().slice(0, -1);\n\n    // 11. Get answer with retries\n    const MAX_RETRIES = 2;\n    let retries = 0;\n    let response;\n\n    while (retries <= MAX_RETRIES) {\n      try {\n        response = await chain.call({\n          question: question.trim(),\n          chat_history: formattedHistory,\n        });\n        break;\n      } catch (error) {\n        if (retries === MAX_RETRIES) throw error;\n        retries++;\n        await new Promise(resolve => setTimeout(resolve, 1000 * retries));\n      }\n    }\n\n    // 12. Process answer\n    const processAnswer = (text: string, sources: any[]) => {\n      sources.forEach(doc => {\n        const page = doc.metadata.pdfInfo?.pageNumber;\n        if (page) {\n          const quote = doc.pageContent.substring(0, 100).trim();\n          if (text.includes(quote)) {\n            const safeQuote = quote.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            text = text.replace(\n              new RegExp(safeQuote, 'i'),\n              `${quote} [p.${page}]`\n            );\n          }\n        }\n      });\n\n      if (text.length > 300) {\n        const keyPoints = text.split('\\n')\n          .filter(line => line.match(/important|key|essential|note|summary/i))\n          .map(line => `- ${line.replace(/\\[p\\.\\d+\\]/g, '').trim()}`)\n          .slice(0, 5);\n\n        if (keyPoints.length > 1) {\n          text = `## Comprehensive Answer\\n${text}\\n\\n### Key Takeaways\\n${keyPoints.join('\\n')}`;\n        }\n      }\n\n      return text;\n    };\n\n    const processedAnswer = processAnswer(response.text, response.sourceDocuments);\n\n    // 13. Format sources\n    const formattedSources = response.sourceDocuments.map((doc: any) => ({\n      page: doc.metadata.pdfInfo?.pageNumber || 1,\n      content: doc.pageContent\n        .split('\\n')\n        .filter((line: string) => line.trim().length > 0)\n        .slice(0, 3)\n        .join(' ') + '...',\n    }));\n\n    // 14. Track successful chat usage\n    await incrementChatUsage(user.id, fileUrl);\n\n    // 15. Return response with usage information\n    return NextResponse.json({\n      answer: processedAnswer,\n      sources: formattedSources,\n      suggestedQuestions: generateFollowUps(question, processedAnswer),\n      usage: limitCheck.currentUsage + 1,\n      remaining: limitCheck.chatLimit - (limitCheck.currentUsage + 1)\n    });\n\n  } catch (error) {\n    console.error('API error:', {\n      error: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      timestamp: new Date().toISOString(),\n    });\n\n    return NextResponse.json(\n      { \n        error: \"Failed to process question\",\n        details: process.env.NODE_ENV === 'development' \n          ? error instanceof Error ? error.message : String(error)\n          : undefined,\n        suggestion: \"Try rephrasing your question or check the document format\",\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function\nfunction generateFollowUps(question: string, answer: string): string[] {\n  const questionTypes = [\n    \"Can you explain more about [key concept]?\",\n    \"What are the implications of [point]?\",\n    \"How does this compare to [related topic]?\",\n    \"Are there any exceptions to [rule]?\",\n  ];\n\n  const keyTerms = answer.match(/(?:\\[p\\.\\d+\\]|\"([^\"]+)\"|'([^']+)'|`([^`]+)`)/g) || [];\n  const uniqueTerms = [...new Set(keyTerms.map(term => term.replace(/\\[p\\.\\d+\\]|[\"'`]/g, '')))];\n\n  return questionTypes\n    .map(q => uniqueTerms.length > 0 \n      ? q.replace(/\\[.*?\\]/, uniqueTerms[Math.floor(Math.random() * uniqueTerms.length)])\n      : q)\n    .slice(0, 3);\n}"],"names":[],"mappings":"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","debugId":null}}]
}