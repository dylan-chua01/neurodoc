{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/utils/prompts.ts"],"sourcesContent":["\nexport const SUMMARY_SYSTEM_PROMPT = `You are an expert document analyst who creates precision summaries that transform complex documents into actionable intelligence. Adapt your output based on document type and audience needs while maintaining professional depth and engagement.\n\n# [Document Title: Specific and Descriptive]\n• 🎯 Core Thesis: One compelling sentence capturing the document's essence\n• 📌 Context: Optional secondary framing point if needed\n\n## Document Profile\n• 📄 Type: [Academic/Legal/Business/Technical] \n• 👥 Primary Audience: [Students/Lawyers/Executives/Technicians]\n• ⏳ Time Relevance: [Key dates/periods/deadlines]\n• 🏛️ Jurisdiction/Scope: [For legal/business docs]\n\n## Decision-Making Essentials\n• 🔑 [First evidence-based insight requiring action]\n• 💡 [Second significant finding with implications]\n• 📊 [Third data-driven conclusion with impact]\n• 🔄 Time-sensitive elements: [🟢 Low/🟡 Medium/🔴 High urgency]\n\n## \"If You Only Remember 3 Things\"\n• ⭐ [Most critical takeaway with specific details]\n• ⭐ [Second must-know point with practical relevance]\n• ⭐ [Third essential insight with distinctive value]\n\n## Actionable Intelligence\n• ✅ [First practical application or recommendation]\n• 🛠️ [Second implementation strategy]\n• 📈 [Third strategic consideration]\n• ⏱️ [Time-sensitive actions with deadlines]\n\n## Key Metrics & Data Points\n• 📈 [Primary Metric]: [Value] | [Context/Comparison] | [Significance]\n• 💰 [Financial Figure]: [Value] | [% change] | [Impact assessment]\n• 📊 [Statistical Finding]: [Value] | [Confidence level] | [Implications]\n• ⏱️ [Time-based Data]: [Value] | [Trend direction] | [Forecast]\n• 🔢 [Other Critical Number]: [Value] | [Benchmark comparison] | [Actionability]\n\n## Stakeholder Impact Matrix\n• 👥 [Group 1]: [Benefit level] | [Risk exposure] | [Required action]\n• 👥 [Group 2]: [Benefit level] | [Risk exposure] | [Required action]\n• 👥 [Group 3]: [Benefit level] | [Risk exposure] | [Required action]\n\n## Terminology Decoder\n• 📚 [Key Term 1]: [Audience-appropriate definition]\n• 🔍 [Key Term 2]: [Simplified explanation]\n• ⚙️ [Technical term]: [Field-specific clarification]\n\n## Professional Evaluation\n• 💪 Document Strength: [Methodology/evidence/innovation]\n• ⚠️ Caveat: [Limitation/bias/competitor concern] \n• 🚨 Red Flags: [Unsubstantiated claims/contradictions/omissions]\n\n## Professional Lens Filters\n• 🎓 **Academic Perspective**\n  - Theoretical Framework: [Key academic foundations]\n  - Research Methodology: [Validity assessment ⭐⭐⭐⭐☆]\n  - Citation Highlights: [Most reference-worthy content]\n\n• ⚖️ **Legal Perspective**\n  - Precedent Value: [Case law/regulatory impact]\n  - Frequently Contested Clauses: [Key legal pressure points]\n  - Critical Deadlines: [Filing/compliance dates]\n\n• 💰 **Business Perspective**\n  - Financial Impact: [Revenue/cost implications]\n  - Market Intelligence: [Competitive positioning]\n  - Implementation Complexity: [Resources/timeline/dependencies]\n\n• ⚙️ **Technical Perspective**\n  - Specifications: [Key technical requirements]\n  - Integration Requirements: [System/compatibility notes]\n  - Implementation Roadmap: [Step-by-step guidance]\n\n## Action Pack\n• 📧 Communication Template: [Key points for stakeholder briefing]\n• 📊 Visualization-Ready Data: [Key metrics/comparisons]\n• 🗣️ Talking Points: [For meetings/presentations/discussions]\n\n## Final Synthesis\n• 📌 Ultimate Takeaway: [Single most important point]\n• 🔮 Future Implications: [Emerging trends/long-term impact]\n\n---\n\n**Formatting Rules:**\n1. Emoji Usage:\n   - Choose emojis appropriate to subject matter\n   - Use consistently for section headers\n   - Keep professional (fewer emojis for formal documents)\n   - Ensure emojis add meaning rather than decoration\n\n2. Always:\n   - Begin main points with \"• [emoji]\"\n   - Maintain parallel structure throughout\n   - Use Markdown headers (##, ###) for clear hierarchy\n   - Keep explanations audience-appropriate\n   - Color-code urgency where applicable (🟢/🟡/🔴)\n\n3. Section Selection:\n   - Include core sections for all documents\n   - Adapt Professional Lens section based on document type\n   - Emphasize sections most relevant to primary audience\n   - Omit sections that don't apply to the document\n\n4. Never:\n   - Use numbered lists\n   - Exceed 5 bullet points per section\n   - Include inappropriate perspective for document type\n\n**Quality Checks:**\n✓ Decision-critical information prioritized\n✓ Technical accuracy preserved\n✓ Jargon explained for non-specialists\n✓ Actionable insights highlighted\n✓ Key numerical data clearly presented\n✓ Source limitations acknowledged\n✓ Visual elements (tables, color-coding) used purposefully\n✓ Important metrics contextualized with benchmarks\n`\n"],"names":[],"mappings":";;;AACO,MAAM,wBAAwB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHtC,CAAC","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/geminiai.ts"],"sourcesContent":["import { SUMMARY_SYSTEM_PROMPT } from \"@/utils/prompts\";\nimport { GoogleGenAI } from \"@google/genai\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\nimport { ConversationalRetrievalQAChain } from \"langchain/chains\";\n\n// Check for API key\nif (!process.env.GEMINI_API_KEY) {\n  throw new Error(\"❌ Missing GEMINI_API_KEY. Please define it in .env.local\");\n}\n\n// Initialize Gemini\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\n\nexport const generateSummaryFromGemini = async (pdfText: string) => {\n  try {\n    const prompt = `${SUMMARY_SYSTEM_PROMPT}\n\nTransform this document into an engaging, easy-to-read summary with contextually relevant emojis and proper markdown formatting:\n\n${pdfText}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [\n        {\n          role: \"user\",\n          parts: [{ text: prompt }],\n        },\n      ],\n    });\n\n    // Some SDKs may return .candidates[0].content.parts[0].text instead of .text\n    const summary = (response as any)?.text ||\n                    (response as any)?.candidates?.[0]?.content?.parts?.[0]?.text;\n\n    if (!summary) {\n      throw new Error(\"❌ Empty response from Gemini API\");\n    }\n\n    return summary;\n\n  } catch (error: any) {\n    // Handle Gemini rate limit\n    if (error?.status === 429) {\n      throw new Error(\"❌ RATE_LIMIT_EXCEEDED\");\n    }\n\n    // Full error trace\n    console.error(\"🚨 Gemini API Error:\", {\n      message: error.message,\n      stack: error.stack,\n      cause: error.cause,\n      error,\n    });\n\n    throw error;\n  }\n};\n\nexport async function generateQuestions(summaryText: string) {\n  const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n  const prompt = `\nYou are a quiz generator. Based on the following summary, create exactly 8 high-quality quiz questions.\nMix multiple-choice questions (4 options each) with short-answer questions.\n\nIMPORTANT FORMATTING RULES:\n- Start each question with \"QUESTION:\" followed by the question text\n- For multiple-choice, list options as \"OPTION A:\", \"OPTION B:\", etc.\n- End each question with \"ANSWER:\" followed by the correct answer\n- For MCQ answers, use just the letter (A, B, C, or D)\n- For short answers, provide a concise but complete answer\n- Separate each question with \"---\"\n\nExample format:\nQUESTION: What is the capital of France?\nOPTION A: Berlin\nOPTION B: Madrid  \nOPTION C: Paris\nOPTION D: Rome\nANSWER: C\n\n---\n\nQUESTION: Explain the main benefit of renewable energy.\nANSWER: Renewable energy sources like solar and wind are sustainable and don't deplete natural resources, making them environmentally friendly alternatives to fossil fuels.\n\n---\n\nSummary to create questions from:\n${summaryText}\n\nGenerate the questions now:`;\n\n  try {\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the structured response\n    const questionBlocks = text.split('---').filter(block => block.trim());\n    \n    const parsed = questionBlocks.map((block) => {\n      const lines = block.trim().split('\\n').filter(line => line.trim());\n      \n      let question = '';\n      let options: string[] = [];\n      let answer = '';\n      \n      for (const line of lines) {\n        const trimmedLine = line.trim();\n        \n        if (trimmedLine.startsWith('QUESTION:')) {\n          question = trimmedLine.replace('QUESTION:', '').trim();\n        } else if (trimmedLine.startsWith('OPTION')) {\n          const optionText = trimmedLine.replace(/OPTION [A-D]:\\s*/, '').trim();\n          if (optionText) options.push(optionText);\n        } else if (trimmedLine.startsWith('ANSWER:')) {\n          answer = trimmedLine.replace('ANSWER:', '').trim();\n        }\n      }\n      \n      // Validate the parsed question\n      if (!question || !answer) {\n        return null;\n      }\n      \n      // For MCQ, ensure we have 4 options and the answer is a letter\n      if (options.length === 4 && ['A', 'B', 'C', 'D'].includes(answer)) {\n        return {\n          question,\n          options,\n          answer,\n          type: 'mcq'\n        };\n      }\n      \n      // For short answer, ensure no options and answer is substantial\n      if (options.length === 0 && answer.length > 10) {\n        return {\n          question,\n          options: [],\n          answer,\n          type: 'short'\n        };\n      }\n      \n      return null;\n    }).filter(Boolean);\n\n    // Ensure we have at least some valid questions\n    if (parsed.length === 0) {\n      throw new Error(\"No valid questions could be parsed from the response\");\n    }\n\n    return parsed;\n    \n  } catch (error) {\n    console.error(\"Error generating questions:\", error);\n    \n    // Fallback: generate simpler questions\n    try {\n      return await generateFallbackQuestions(summaryText);\n    } catch (fallbackError) {\n      console.error(\"Fallback question generation also failed:\", fallbackError);\n      throw new Error(\"Failed to generate quiz questions\");\n    }\n  }\n}\n\n// Fallback question generator with simpler format\nasync function generateFallbackQuestions(summaryText: string) {\n  const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n  \n  const prompt = `\nCreate 5 simple questions about this summary. Make them clear and answerable.\n\nFormat each as:\nQ1: [question]\nA1: [answer]\n\nQ2: [question] \nA2: [answer]\n\nSummary: ${summaryText}`;\n\n  const result = await model.generateContent(prompt);\n  const response = await result.response;\n  const text = response.text();\n  \n  const questions = [];\n  const lines = text.split('\\n');\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.match(/^Q\\d+:/)) {\n      const question = line.replace(/^Q\\d+:\\s*/, '').trim();\n      const nextLine = lines[i + 1]?.trim();\n      \n      if (nextLine && nextLine.match(/^A\\d+:/)) {\n        const answer = nextLine.replace(/^A\\d+:\\s*/, '').trim();\n        \n        if (question && answer) {\n          questions.push({\n            question,\n            options: [],\n            answer,\n            type: 'short'\n          });\n        }\n      }\n    }\n  }\n  \n  return questions;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/lib/langchain.ts"],"sourcesContent":["import { PDFLoader } from \"@langchain/community/document_loaders/fs/pdf\";\nimport { RecursiveCharacterTextSplitter } from \"langchain/text_splitter\";\nimport { array } from \"zod\";\nimport { getVectorStore } from \"./db\";\n\nexport async function fetchAndExtractPdfText(fileUrl:string) {\n\n    const response = await fetch(fileUrl);\n    const blob = await response.blob();\n\n    const arrayBuffer = await blob.arrayBuffer();\n\n    const loader = new PDFLoader(new Blob([arrayBuffer]));\n\n    const docs = await loader.load();\n    //combine pages\n    return docs.map((doc) => doc.pageContent).join('\\n');\n}\n\nexport async function ingestAndEmbedPDF(fileUrl: string) {\n    const fileRes = await fetch(fileUrl);\n    const blob = await fileRes.blob();\n  \n    const loader = new PDFLoader(blob, { splitPages: true });\n    const docs = await loader.load();\n  \n    const splitter = new RecursiveCharacterTextSplitter({\n      chunkSize: 1000,\n      chunkOverlap: 200,\n    });\n  \n    const splitDocs = await splitter.splitDocuments(docs);\n    const vectorStore = await getVectorStore(fileUrl); // e.g. Chroma/Pinecone\n    await vectorStore.addDocuments(splitDocs);\n  \n    return vectorStore.asRetriever();\n  }"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;AAEA;;;;;;;;AAEO,eAAe,uBAAuB,OAAc;IAEvD,MAAM,WAAW,MAAM,MAAM;IAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,MAAM,cAAc,MAAM,KAAK,WAAW;IAE1C,MAAM,SAAS,IAAI,iLAAA,CAAA,YAAS,CAAC,IAAI,KAAK;QAAC;KAAY;IAEnD,MAAM,OAAO,MAAM,OAAO,IAAI;IAC9B,eAAe;IACf,OAAO,KAAK,GAAG,CAAC,CAAC,MAAQ,IAAI,WAAW,EAAE,IAAI,CAAC;AACnD;AAEO,eAAe,kBAAkB,OAAe;IACnD,MAAM,UAAU,MAAM,MAAM;IAC5B,MAAM,OAAO,MAAM,QAAQ,IAAI;IAE/B,MAAM,SAAS,IAAI,iLAAA,CAAA,YAAS,CAAC,MAAM;QAAE,YAAY;IAAK;IACtD,MAAM,OAAO,MAAM,OAAO,IAAI;IAE9B,MAAM,WAAW,IAAI,qKAAA,CAAA,iCAA8B,CAAC;QAClD,WAAW;QACX,cAAc;IAChB;IAEA,MAAM,YAAY,MAAM,SAAS,cAAc,CAAC;IAChD,MAAM,cAAc,MAAM,CAAA,GAAA,yGAAA,CAAA,iBAAc,AAAD,EAAE,UAAU,uBAAuB;IAC1E,MAAM,YAAY,YAAY,CAAC;IAE/B,OAAO,YAAY,WAAW;AAChC","debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/utils/format-utils.ts"],"sourcesContent":["export function formatFileNameAsTitle(fileName: string):\nstring {\n    const withoutExtension = fileName.replace(/\\.[^/.]+$/,'');\n    const withSpaces = withoutExtension\n    .replace(/[-_]+/g,'')\n    .replace(/([a-z])([A-Z])/g, '$1 $2');\n\n    return withSpaces\n    .split('')\n    .map((word) => word.charAt(0).toUpperCase() +word.slice(1).toLowerCase())\n    .join('')\n    .trim();\n}"],"names":[],"mappings":";;;AAAO,SAAS,sBAAsB,QAAgB;IAElD,MAAM,mBAAmB,SAAS,OAAO,CAAC,aAAY;IACtD,MAAM,aAAa,iBAClB,OAAO,CAAC,UAAS,IACjB,OAAO,CAAC,mBAAmB;IAE5B,OAAO,WACN,KAAK,CAAC,IACN,GAAG,CAAC,CAAC,OAAS,KAAK,MAAM,CAAC,GAAG,WAAW,KAAI,KAAK,KAAK,CAAC,GAAG,WAAW,IACrE,IAAI,CAAC,IACL,IAAI;AACT","debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/actions/upload-actions.ts"],"sourcesContent":["'use server';\n\nimport { getDbConnection } from \"@/lib/db\";\nimport { generateSummaryFromGemini } from \"@/lib/geminiai\";\nimport { fetchAndExtractPdfText } from \"@/lib/langchain\";\nimport { generateSummaryFromOpenAI } from \"@/lib/openai\";\nimport { formatFileNameAsTitle } from \"@/utils/format-utils\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { revalidatePath } from \"next/cache\";\n\ninterface PdfSummaryType {\n    userId?: string;\n    fileUrl: string;\n    summary: string;\n    title: string;\n    fileName: string;\n}\n\nexport async function generatePdfSummary(uploadResponse: [{\n    serverData: {\n        userId: string;\n        file: {\n            url: string;\n            name: string;\n        }\n    }\n}]) {\n    if(!uploadResponse) {\n        return {\n            success: false,\n            message: 'File upload failed',\n            data: null,\n        };\n    }\n\n    const { serverData: {\n        userId, \n        file: { url: pdfUrl, name: fileName },\n    },\n    } = uploadResponse[0];\n\n    if(!pdfUrl) {\n        return {\n            success: false,\n            message: 'File upload failed',\n            data: null,\n        }\n    }\n\n    try {\n        const pdfText = await fetchAndExtractPdfText(pdfUrl);\n        console.log({ pdfText });\n\n        let summary;\n        try {\n            summary = await generateSummaryFromGemini(pdfText);\n            console.log({ summary });\n        } catch (error) {\n            console.log(error);\n            //call gemini\n            if (error instanceof Error && error.message === 'RATE_LIMIT_EXCEEDED') {\n                try {\n                    summary = await generateSummaryFromGemini(pdfText);\n                } catch (geminiError) {\n                    console.error('Gemini API feailed after OPENAI quota exceeded', geminiError\n                    );\n                    throw new Error('Failed to generate summary with available AI providers'\n                    );\n                }\n            }\n        }\n\n\n        if(!summary) {\n            return {\n                success: false,\n                message: 'File to generate summary',\n                data: null,\n            };\n        }\n\n        const formattedFileName = formatFileNameAsTitle(fileName);\n\n        return {\n            success: true,\n            message: 'Summary generated successfully',\n            data: {\n                title: fileName,\n                summary,\n            },\n        }\n    } catch (err) {\n        return {\n            success: false,\n            message: 'File upload failed',\n            data: null,\n        }\n    }\n}\nasync function savePdfSummary({\n    userId, \n    fileUrl, \n    summary, \n    title, \n    fileName\n}: {\n    userId: string; \n    fileUrl: string; \n    summary: string; \n    title: string;\n    fileName: string;\n}) {\n    try {\n        const sql = await getDbConnection();\n        \n        const [savedSummary] = await sql`\n            INSERT INTO pdf_summaries(\n                user_id,\n                original_file_url,\n                summary_text,\n                title,\n                file_name\n            ) VALUES (\n                ${userId},\n                ${fileUrl},\n                ${summary},\n                ${title},\n                ${fileName}\n            ) RETURNING id, summary_text\n        `;\n        return savedSummary;\n    } catch (error) {\n        console.error('Error saving PDF summary', error);\n        throw error;\n    }\n}\n\nexport async function storePdfSummaryAction({\n    fileUrl,\n    summary,\n    title,\n    fileName,\n}: PdfSummaryType) {\n\n    //user logged in\n    //save pdf summary\n    //savepdf summary()\n    let savedSummary: any;\n    try {\n        const { userId } = await auth();\n        if(!userId) {\n            return {\n                success: false,\n                message: 'User not found'\n            };\n        }\n        savedSummary = await savePdfSummary({\n            userId,\n            fileUrl,\n            summary,\n            title,\n            fileName,\n        });\n        if(!savedSummary) {\n            return {\n                success: false,\n                message: 'Failed to save PDF summary, please try again...'\n            };\n        }\n    } catch (error) {\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : 'Error saving PDF summary'\n        }  \n    };\n\n    revalidatePath(`/summaries/${savedSummary.id}`);\n\n    return {\n        success: true,\n        message: 'PDF summary saved successfully',\n        data: {\n            id: savedSummary.id,\n        },\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 754, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/components/upload/upload-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/upload/upload-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/upload/upload-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","debugId":null}},
    {"offset": {"line": 768, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/components/upload/upload-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/upload/upload-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/upload/upload-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","debugId":null}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/components/upload/upload-header.tsx"],"sourcesContent":["import { Sparkles } from \"lucide-react\";\nimport { Badge } from \"../ui/badge\";\n\nexport default function UploadHeader() {\n    return (\n        <div className=\"flex flex-col items-center jusify-center gap-6 text-center\">\n            <div className=\"relative p-[1px] overflow-hidden rounded-full bg-linear-to-r from-rose-200 via-rose-500 to-rose-800 animate-gradient-x group\">\n                <Badge\n                    variant={'secondary'}\n                    className=\"relative px-6 py-2 text-base font-medium bg-white rounded-full group-hover:bg-gray-50 transition-colors\">\n                    <Sparkles \n                        className=\"h-6 w-6 mr-2 text-rose-600 animate-pulse\"/>\n                    <span>AI-Powered Content Creation</span>\n                </Badge>\n            </div>\n            <div className=\"capitalize text-3xl font-bold tracking-tight text-gray-900sm:text-4xl\">\n            Start Uploading{' '}\n            <span className=\"relative inline-block\">\n            \n            <span className=\"relative z-10 px-2\">\n                Your PDF's\n            </span> \n            <span className=\"absolute inset-0 bg-rose-200/50 -rotate-2 rounded-lg transform -skew-y-1\" aria-hidden=\"true\">\n\n            </span>\n            </span>\n            </div>\n            <div className=\"mt-2 text-lg leading-8 text-gray-600 max-w-2xl text-center\">\n                <p>Upload your PDF and let our AI do the magic!</p>\n            </div>\n        </div>\n    )\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACpB,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC,0HAAA,CAAA,QAAK;oBACF,SAAS;oBACT,WAAU;;sCACV,8OAAC,0MAAA,CAAA,WAAQ;4BACL,WAAU;;;;;;sCACd,8OAAC;sCAAK;;;;;;;;;;;;;;;;;0BAGd,8OAAC;gBAAI,WAAU;;oBAAwE;oBACvE;kCAChB,8OAAC;wBAAK,WAAU;;0CAEhB,8OAAC;gCAAK,WAAU;0CAAqB;;;;;;0CAGrC,8OAAC;gCAAK,WAAU;gCAA2E,eAAY;;;;;;;;;;;;;;;;;;0BAKvG,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;8BAAE;;;;;;;;;;;;;;;;;AAInB","debugId":null}},
    {"offset": {"line": 899, "column": 0}, "map": {"version":3,"sources":["file:///Users/dylanchua/Documents/Personal/Code/neurodocument/app/%28logged-in%29/upload/page.tsx"],"sourcesContent":["import BgGradient from \"@/components/common/bg-gradient\";\nimport UploadForm from \"@/components/upload/upload-form\";\nimport UploadHeader from \"@/components/upload/upload-header\";\nimport { hasReachedUploadLimit } from \"@/lib/user\";\nimport { currentUser } from \"@clerk/nextjs/server\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function Page() {\n    const user = await currentUser();\n\n    if(!user?.id) {\n        redirect('/sign-in');\n    }\n\n    const userId = user.id;\n    const { hasReachedLimit } = await hasReachedUploadLimit(userId);\n\n    if(hasReachedLimit) {\n        redirect('/dashboard');\n    }\n    \n    return (\n        <section className=\"min-h-screen\">\n            <BgGradient />\n            <div className=\"mx-auto max-w-7xl px-6 py-24 sm:py-32 lg:px-8\">\n                <div className=\"flex flex-col items-center justify-center gap-6 text-center\">\n                <UploadHeader />\n                <UploadForm />\n            </div>\n            </div>\n        </section>\n    )\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;AAEe,eAAe;IAC1B,MAAM,OAAO,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAE7B,IAAG,CAAC,MAAM,IAAI;QACV,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACb;IAEA,MAAM,SAAS,KAAK,EAAE;IACtB,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,CAAA,GAAA,2GAAA,CAAA,wBAAqB,AAAD,EAAE;IAExD,IAAG,iBAAiB;QAChB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACb;IAEA,qBACI,8OAAC;QAAQ,WAAU;;0BACf,8OAAC,uIAAA,CAAA,UAAU;;;;;0BACX,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;oBAAI,WAAU;;sCACf,8OAAC,yIAAA,CAAA,UAAY;;;;;sCACb,8OAAC,uIAAA,CAAA,UAAU;;;;;;;;;;;;;;;;;;;;;;AAK3B","debugId":null}}]
}